<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs (Posts by Hameer Abbasi)</title><link>https://labs.quansight.org/</link><description></description><atom:link href="https://labs.quansight.org/authors/hameer-abbasi.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Sun, 02 Jun 2019 14:46:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>uarray: A Generic Override Framework for Methods</title><link>https://labs.quansight.org/blog/2019/04/uarray-intro/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="uarray:-A-Generic-Override-Framework-for-Methods"&gt;&lt;code&gt;uarray&lt;/code&gt;: A Generic Override Framework for Methods&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#uarray:-A-Generic-Override-Framework-for-Methods"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;uarray&lt;/code&gt; is an override framework for methods in Python. In the scientific Python ecosystem, and in other similar places, there has been one recurring problem: That similar tools to do a job have existed, but don't conform to a single, well-defined API. &lt;code&gt;uarray&lt;/code&gt; tries to solve this problem in general, but also for the scientific Python ecosystem in particular, by defining APIs independent of their implementations.&lt;/p&gt;
&lt;h3 id="Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;Array Libraries in the Scientific Python Ecosystem&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When SciPy was created, and Numeric and Numarray unified into NumPy, it jump-started Python's data science community. The ecosystem grew quickly: Academics started moving to SciPy, and the Scikits that popped up made the transition all the more smooth.&lt;/p&gt;
&lt;p&gt;However, the scientific Python community also shifted during that time: GPUs and distributed computing emerged. Also, there were old ideas that couldn't really be used with NumPy's API, such as sparse arrays. To solve these problems, various libraries emerged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dask, for distributed NumPy&lt;/li&gt;
&lt;li&gt;CuPy, for NumPy on Nvidia-branded GPUs.&lt;/li&gt;
&lt;li&gt;PyData/Sparse, a project started to make sparse arrays conform to the NumPy API&lt;/li&gt;
&lt;li&gt;Xnd, which extends the type system and the universal function concept found in NumPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/04/uarray-intro/</guid><pubDate>Tue, 30 Apr 2019 05:04:40 GMT</pubDate></item></channel></rss>