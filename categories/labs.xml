<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs (Posts about Labs)</title><link>https://labs.quansight.org/</link><description></description><atom:link href="https://labs.quansight.org/categories/labs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Tue, 16 Jul 2019 00:27:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Quansight presence at SciPy'19</title><link>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday the SciPy'19 conference ended. It was a lot of fun, and very productive. You can really feel that there's a lot of energy in the community, and that it's growing and maturing. This post is just a quick update to summarize Quansight's presence and contributions, as well as some of the more interesting things I noticed.&lt;/p&gt;
&lt;h3&gt;A few highlights&lt;/h3&gt;
&lt;p&gt;The "Open Source Communities" track, which had a strong emphasis on topics like burnout, diversity and sustainability, as well as the keynotes by Stuart Geiger ("&lt;em&gt;The Invisible Work of Maintaining and Sustaining Open-Source Software&lt;/em&gt;") and Carol Willing ("&lt;em&gt;Jupyter: Always Open for Learning and Discovery&lt;/em&gt;") showed that many more people and projects are paying more attention to and evolving their thinking on the human and organizational aspects of open source. &lt;/p&gt;
&lt;p&gt;I did not go to many technical talks, but did make sure to catch Matt Rocklin's talk "&lt;em&gt;Refactoring the SciPy Ecosystem for Heterogeneous Computing&lt;/em&gt;". Matt clearly explained some key issues and opportunities around the state of array computing libraries in Python - I highly recommend watching this talk.&lt;/p&gt;
&lt;p&gt;Abigail Cabunoc Mayes' talk "&lt;em&gt;Work Open, Lead Open (#WOLO) for Sustainability&lt;/em&gt;" was fascinating - it made me rethink the governance models and roles we use for our projects, and I worked on some of her concrete suggestions during the sprints.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>SciPy</category><guid>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</guid><pubDate>Mon, 15 Jul 2019 05:00:00 GMT</pubDate></item><item><title>Labs update and May highlights</title><link>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Time flies when you're having fun. Here is an update of some of the highlights
of my second month at Quansight Labs.&lt;/p&gt;
&lt;h3&gt;The making of a black hole image &amp;amp; GitHub Sponsors&lt;/h3&gt;
&lt;p&gt;Both Travis and myself were invited by GitHub to attend GitHub Satellite in
Berlin. The main reason was that Nat Friedman (GitHub CEO) decided to spend the
first 20 minutes of his keynote to highlight the &lt;a href="https://eventhorizontelescope.org/"&gt;Event Horizon
Telescope's&lt;/a&gt; black hole image and the open
source software that made that imaging possible. This included the scientific
Python very prominently - NumPy, Matplotlib, Python, Cython, SciPy, AstroPy and
other projects were highlighted. At the same time, Nat introduced new GitHub
features like "used by", a triaging role and new dependency graph features and
illustrated how those worked for NumPy. These features will be very welcome
news to maintainers of almost any project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Satellite'19 keynote, showcasing NumPy and Matplotlib" src="https://labs.quansight.org/images/githubsatellite_keynote_numpy_matplotlib.png"&gt;&lt;/p&gt;
&lt;p&gt;The single most visible feature introduced was &lt;strong&gt;GitHub Sponsors&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Sponsors enabled on the NumPy repo" src="https://labs.quansight.org/images/github_sponsors_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed meeting &lt;a href="https://devonzuegel.com"&gt;Devon Zuegel&lt;/a&gt;, Product
Manager of the Open Source Economy Team at GitHub, in person after previously
having had the chance to exchange ideas with her about the funding related
needs of scientific Python projects and their core teams. I'm confident that
GitHub Sponsors will evolve in a direction that's beneficial to
community-driven open source projects.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</guid><pubDate>Wed, 12 Jun 2019 05:00:00 GMT</pubDate></item><item><title>TDK-Micronas partners with Quansight to sponsor Spyder</title><link>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs.
This will enable the development of some features that have been requested by
our users, as well as new features that will help TDK develop custom Spyder
plugins in order to complement their Automatic Test Equipment (ATE’s) in the
development of their Application Specific Integrated Circuits (ASIC’s).&lt;/p&gt;
&lt;p&gt;At this point it may be useful to clarify the relationship the role of
Quansight Labs in Spyder's development and the relationship with TDK. To quote
Ralf Gommers (director of Quansight Labs):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"We're an R&amp;amp;D lab for open source development of core technologies around data
science and scientific computing in Python. And focused on growing communities
around those technologies. That's how I see it for Spyder as well: Quansight
Labs enables developers to be employed to work on Spyder, and helps with
connecting them to developers of other projects in similar situations. Labs
should be an enabler to let the Spyder project, its community and individual
developers grow. And Labs provides mechanisms to attract and coordinate
funding. Of course the project is still independent. If there are other
funding sources, e.g. donations from individuals to Spyder via OpenCollective,
all the better."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Multiple Projects aka Workspaces&lt;/h3&gt;
&lt;p&gt;In its current state Spyder can only handle one active project at a time.
Although in the past we had basic support for workspaces, it was never a fully
functional feature, so to ease development and simplify the user experience,
we decided to remove it in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</guid><pubDate>Sun, 02 Jun 2019 05:00:00 GMT</pubDate></item><item><title>Community-driven open source and funded development</title><link>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Quansight Labs is an experiment for us in a way. One of our main aims is to
channel more resources into community-driven PyData projects, to keep them
healthy and accelerate their development. &lt;em&gt;And do so in a way that projects
themselves stay in charge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post explains one method we're starting to use for this. I'm writing it
to be transparent with projects, the wider community and potential funders
about what we're starting to do. As well as to explicitly solicit feedback on
this method.&lt;/p&gt;
&lt;h3&gt;Community work orders&lt;/h3&gt;
&lt;p&gt;If you talk to someone about supporting an open source project, in particular a
well-known one that they rely on (e.g. NumPy, Jupyter, Pandas), they're often
willing to listen and help. What you quickly learn though is that they want
to know in some detail what will be done with the funds provided. This is
true not only for companies, but also for individuals. In addition, companies
will likely want a written agreement and some form of reporting about the
progress of the work. To meet this need we came up with &lt;em&gt;community work
orders&lt;/em&gt; (CWOs) - agreements that outline what work will be done on a project
(implementing new features, release management, improving documentation,
etc.) and outlining a reporting mechanism. What makes a CWO different from a
consulting contract? Key differences are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be work that is done on the open source project itself (and not e.g.
   on a plugin for it, or a customization for the client).&lt;/li&gt;
&lt;li&gt;The developers must have a reasonable amount of freedom to decide what to
   work on and what the technical approach will be, within the broad scope of
   the agreement.&lt;/li&gt;
&lt;li&gt;Deliverables cannot be guaranteed to end up in a project; instead the funder
   gets the promise of a best effort of implementation and working with the
   community.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Respecting community processes&lt;/h3&gt;
&lt;p&gt;Point 3 above is particularly important: &lt;em&gt;we must respect how open source
projects make decisions&lt;/em&gt;. If the project maintainers decide that they don't
want to include a particular change or new feature, that's their decision to
make. Any code change proposed as part of work on a CWO has to go through the
same review process as any other change, and be accepted on its merits. The
argument "but someone paid for this" isn't particularly strong, nor is one
that reviewers should have to care about. Now of course we don't expect it to
be common for work to be rejected. An important part of the Quansight value
proposition is that because we understand how open source works and many of
our developers are maintainers and contributors of the open source projects
already, we propose work that the community already has interest in and we
open the discussion about any major code change early to avoid issues.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</guid><pubDate>Wed, 29 May 2019 05:00:00 GMT</pubDate></item><item><title>Measuring API usage for popular numerical and scientific libraries</title><link>https://labs.quansight.org/blog/2019/05/python-package-function-usage/</link><dc:creator>Christopher Ostrouchov</dc:creator><description>&lt;div&gt;&lt;p&gt;Developers of open source software often have a difficult time
understanding how others utilize their libraries. Having better data of
when and how functions are being used has many benefits. Some of these
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better API design&lt;/li&gt;
&lt;li&gt;determining whether or not a feature can be deprecated or removed.&lt;/li&gt;
&lt;li&gt;more instructive tutorials&lt;/li&gt;
&lt;li&gt;understanding the adoption of new features&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python Namespace Inspection&lt;/h2&gt;
&lt;p&gt;We wrote a general tool
&lt;a href="https://github.com/Quansight-Labs/python-api-inspect"&gt;python-api-inspect&lt;/a&gt;
to analyze any function/attribute call within a given set of
namespaces in a repository. This work was heavily inspired by a blog
post on inspecting method usage with
&lt;a href="https://galeascience.wordpress.com/2016/08/10/top-10-pandas-numpy-and-scipy-functions-on-github/"&gt;Google BigQuery&lt;/a&gt;
for &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;,
&lt;a href="https://www.numpy.org/"&gt;NumPy&lt;/a&gt;, and
&lt;a href="https://www.scipy.org/"&gt;SciPy&lt;/a&gt;. The previously mentioned work used
regular expressions to search for method usage. The primary issue with
this approach is that it cannot handle &lt;code&gt;import numpy.random as rand;
rand.random(...)&lt;/code&gt; unless additional regular expressions are
constructed for each case and will result in false
positives. Additionally,
&lt;a href="https://cloud.google.com/bigquery/"&gt;BigQuery&lt;/a&gt; is not a free resource.
Thus, this approach is not general enough and does not scale well with
the number of libraries that we would like to inspect function and
attribute usage.&lt;/p&gt;
&lt;p&gt;A more robust approach is to inspect the Python abstract syntax tree
(AST). Python comes with a performant method from the &lt;a href="https://docs.python.org/3/library/ast.html"&gt;ast
module&lt;/a&gt; &lt;code&gt;ast.parse(...)&lt;/code&gt;
for constructing a Python AST from source code. A &lt;a href="https://docs.python.org/3/library/ast.html#ast.NodeVisitor"&gt;node
visitor&lt;/a&gt;
is used to traverse the AST and record &lt;code&gt;import&lt;/code&gt; statements, and
function/attribute calls. This allows us to catch any absolute
namespace reference. The following are cases that
&lt;a href="https://github.com/Quansight-Labs/python-api-inspect"&gt;python-api-inspect&lt;/a&gt;
catches:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/python-package-function-usage/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/python-package-function-usage/</guid><pubDate>Mon, 27 May 2019 05:00:00 GMT</pubDate></item><item><title>Spyder 4.0 takes a big step closer with the release of Beta 2!</title><link>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been almost two months since I joined Quansight in April, to start 
working on Spyder maintenance and 
development. So far, it has been a very exciting and rewarding journey under 
the guidance of long time Spyder maintainer
&lt;a href="https://github.com/ccordoba12"&gt;Carlos Córdoba&lt;/a&gt;.
This is the first of a series of blog posts we will be writing to showcase 
updates on the development of Spyder, new planned features and news on the 
road to Spyder 4.0 and beyond.&lt;/p&gt;
&lt;p&gt;First off, I would like to give a warm welcome to
&lt;a href="https://github.com/andfoy"&gt;Edgar Margffoy&lt;/a&gt;,
who recently joined Quansight and will be working with the Spyder team to
take its development even further. Edgar has been a core Spyder developer 
for more than two years now, and we are very excited to have his (almost)
full-time commitment to the project.&lt;/p&gt;
&lt;h2&gt;Spyder 4.0 Beta 2 released!&lt;/h2&gt;
&lt;p&gt;Since August 2018, when the first beta of the 4.x series was released, the
Spyder development team has been working hard on our next release.
Over the past year, we've implemented the long awaited full-interface dark theme;
overhauled our entire code completion and linting architecture to use the
&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;,
opening the door to supporting many other languages in the future;
added a new Plots pane to view and manage the figures generated by your code;
and numerous other feature enhancements, bug fixes and internal improvements.&lt;/p&gt;
&lt;h3&gt;Dark theme&lt;/h3&gt;
&lt;p&gt;A full-interface dark theme has been a
&lt;a href="https://github.com/spyder-ide/spyder/issues/2350"&gt;long awaited feature&lt;/a&gt;,
and is enabled by default in Spyder 4. You can still select the
light theme under  &lt;code&gt;Preferences &amp;gt; Appearance&lt;/code&gt; by either choosing a light-background
syntax-highlighting scheme, or changing &lt;code&gt;Interface theme&lt;/code&gt; to &lt;code&gt;Light&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Spyder main window with default panes, with the dark theme applied across the entire interface" src="https://labs.quansight.org/images/spyder-qdarkstyle.png"&gt;&lt;/p&gt;
&lt;p&gt;Pretty, right :-) ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</guid><pubDate>Tue, 21 May 2019 20:02:50 GMT</pubDate></item><item><title>Labs update and April highlights</title><link>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been an exciting first month for me at Quansight Labs. It's a good time
for a summary of what we worked on in April and what is coming next.&lt;/p&gt;
&lt;h3&gt;Progress on array computing libraries&lt;/h3&gt;
&lt;p&gt;Our first bucket of activities I'd call "innovation". The most prominent
projects in this bucket are &lt;a href="https://xnd.io/"&gt;XND&lt;/a&gt;,
&lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;uarray&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/metadsl"&gt;metadsl&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/python-moa"&gt;python-moa&lt;/a&gt;,
&lt;a href="https://github.com/xnd-project/rbc"&gt;Remote Backend Compiler&lt;/a&gt; and
&lt;a href="https://github.com/xnd-project/arrayviews"&gt;arrayviews&lt;/a&gt;.
XND is an umbrella name for a set of related array
computing libraries: &lt;code&gt;xnd&lt;/code&gt;, &lt;code&gt;ndtypes&lt;/code&gt;, &lt;code&gt;gumath&lt;/code&gt;, and &lt;code&gt;xndtools&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hameer Abbasi made some major steps forward with &lt;code&gt;uarray&lt;/code&gt;: the backend and
coercion semantics are now largely worked out, there is
good &lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;, and the
&lt;code&gt;unumpy&lt;/code&gt; package (which currently has &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;XND&lt;/code&gt; and &lt;code&gt;PyTorch&lt;/code&gt; backends)
is progressing well. This &lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;blog post&lt;/a&gt;
gives a good overview of the motivation for &lt;code&gt;uarray&lt;/code&gt; and its main concepts.&lt;/p&gt;
&lt;p&gt;Saul Shanabrook and Chris Ostrouchov worked out how best to put &lt;code&gt;metadsl&lt;/code&gt;
and &lt;code&gt;python-moa&lt;/code&gt; together: &lt;code&gt;metadsl&lt;/code&gt; can be used to create the API for
&lt;code&gt;python-moa&lt;/code&gt; to simplify the code base of the latter a lot. Chris 
also wrote an interesting &lt;a href="https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/"&gt;blog post&lt;/a&gt;
explaining the MoA principles.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</guid><pubDate>Fri, 03 May 2019 05:00:00 GMT</pubDate></item><item><title>What's New in SymPy 1.4</title><link>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;, under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow. As a part of this, I
am able to spend a fraction of my time working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;SymPy 1.4 was released on April 9, 2019. In this post, I'd like to go over
some of the highlights for this release. The full release notes for the
release can be found on the &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4"&gt;SymPy
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To update to SymPy 1.4, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;conda install sympy
&lt;/pre&gt;


&lt;p&gt;or if you prefer to use pip&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pip install -U sympy
&lt;/pre&gt;


&lt;p&gt;The SymPy 1.4 release contains over &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;500 changes from 38 different
submodules&lt;/a&gt;,
so I will not be going over every change, but only a few of the main
highlights. A &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;total of 104
people&lt;/a&gt;
contributed to this release, of whom 66 contributed for the first time for
this release.&lt;/p&gt;
&lt;p&gt;While I did not personally work on any of the changes listed below (my work
for this release tended to be more invisible, behind the scenes fixes), I did
do the release itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>sympy</category><guid>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</guid><pubDate>Thu, 02 May 2019 05:00:00 GMT</pubDate></item><item><title>Thoughts on joining Quansight Labs</title><link>https://labs.quansight.org/blog/2019/04/joining-labs/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;In his &lt;a href="https://www.quansight.com/single-post/2019/04/02/Welcoming-Ralf-Gommers-as-Director-of-Quansight-Labs"&gt;blog post&lt;/a&gt; welcoming me, Travis set out his vision for pushing forward the Python ecosystem for scientific computing and data science, and how to fund it. In this post I'll add my own perspectives to that. Given that Quansight Labs' purpose, it seems fitting to start with how I see things as a community member and organizer.&lt;/p&gt;
&lt;h4&gt;A community perspective&lt;/h4&gt;
&lt;p&gt;The SciPy and PyData ecosystems have experienced massive growth over the past years, and this is likely to continue in the near future. As a maintainer, that feels very gratifying. At the same time it brings up worries. Core projects struggle to keep up with the growth in number of users. Funded development can help with this, if done right. Some of the things I would like to see from companies that participate in the ecosystem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explain innovations they're working on to the community and solicit input, &lt;em&gt;at an early stage&lt;/em&gt;. Developing something away from the spotlight and then unveiling it as the "next big thing" once it's done usually leads to either corporate-driven projects (if users adopt it) or a short life span.&lt;/li&gt;
&lt;li&gt;Participate in a sustainable way. This means for example to contribute in a way that lowers, or at least doesn't increase, the overall effort required for maintenance. Only sending pull requests with new features doesn't achieve that. Solving maintenance pain points or helping with code review does.&lt;/li&gt;
&lt;li&gt;Operate transparently. Develop in the open, plan in the open, be clear about directions and motivations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/joining-labs/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/04/joining-labs/</guid><pubDate>Mon, 08 Apr 2019 05:00:00 GMT</pubDate></item></channel></rss>