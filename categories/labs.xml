<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs (Posts about Labs)</title><link>https://labs.quansight.org/</link><description></description><atom:link href="https://labs.quansight.org/categories/labs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Wed, 01 Jan 2020 19:16:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>metadsl PyData talk</title><link>https://labs.quansight.org/blog/2019/12/metadsl-talk/</link><dc:creator>Saul Shanabrook</dc:creator><description>&lt;div&gt;&lt;h2&gt;metadsl PyData talk&lt;/h2&gt;
&lt;p&gt;PyData NYC just ended and I thought it would be good to collect my thoughts on &lt;a href="https://metadsl.readthedocs.io/en/latest/"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt; based on the many conversations I had there surrounding it. This is a rather long post, so if you are just looking for some code &lt;a href="https://mybinder.org/v2/gh/Quansight-Labs/metadsl/959575fe6d6df884b987954c017dfa7f7c99b61a?urlpath=lab/tree/explorations/2109.12.07%20PyData%20Talk.ipynb"&gt;&lt;strong&gt;here is a Binder link for my talk&lt;/strong&gt;&lt;/a&gt;. Also, here is the talk I gave a month or so later on the same topic in Austin:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/cdWdTPL7zrg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;What is &lt;code&gt;metadsl&lt;/code&gt;?&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
   &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_zero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
   &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/12/metadsl-talk/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>metadsl</category><guid>https://labs.quansight.org/blog/2019/12/metadsl-talk/</guid><pubDate>Tue, 24 Dec 2019 11:00:00 GMT</pubDate></item><item><title>Variable Explorer improvements in Spyder 4</title><link>https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/</link><dc:creator>Daniel Althviz</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt; 4 will be released very soon with lots of interesting new features that you'll want to check out, reflecting years of effort by the team to improve the user experience. In this post, we will be talking about the improvements made to the Variable Explorer.&lt;/p&gt;
&lt;p&gt;These include the brand new Object Explorer for inspecting arbitrary Python variables, full support for MultiIndex dataframes with multiple dimensions, and the ability to filter and search for variables by name and type, and much more.&lt;/p&gt;
&lt;p&gt;It is important to mention that several of the above improvements were made possible through integrating the work of two other projects. Code from &lt;a href="https://github.com/TabViewer/gtabview"&gt;gtabview&lt;/a&gt; was used to implement the multi-dimensional Pandas indexes, while &lt;a href="https://github.com/titusjan/objbrowser"&gt;objbrowser&lt;/a&gt; was the foundation of the new Object Explorer.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/</guid><pubDate>Fri, 29 Nov 2019 01:00:00 GMT</pubDate></item><item><title>A new grant for NumPy and OpenBLAS!</title><link>https://labs.quansight.org/blog/2019/11/numpy-openblas-CZI-grant/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm very pleased to announce that NumPy and OpenBLAS just received a $195,000 grant from
the Chan Zuckerberg Initiative, through its
&lt;a href="https://chanzuckerberg.com/rfa/essential-open-source-software-for-science/"&gt;Essential Open Source Software for Science&lt;/a&gt;
(EOSS) program! This is good news for both projects, and I'm particularly excited about
the types of activities we'll be undertaking, what this will mean in terms of growing
the community, and to be part of the first round of funded projects of this visionary program.&lt;/p&gt;
&lt;h3&gt;The program&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/"&gt;press release&lt;/a&gt;
gives a high level overview of the program, and the
&lt;a href="https://chanzuckerberg.com/eoss/proposals"&gt;grantee website&lt;/a&gt; lists the 32 successful applications.
Other projects that got funded include SciPy and Matplotlib (it's the very first
significant funding for both projects!), Pandas, Zarr, scikit-image, JupyterHub, and
Bioconda - we're in good company!&lt;/p&gt;
&lt;p&gt;Nicholas Sofroniew and Dario Taborelli, two of the people driving the EOSS program, wrote
a blog post that's well worth reading about the motivations for starting this program and
the 42 projects that applied and got funded:
&lt;a href="https://medium.com/@cziscience/4ab7f8d4f5dd"&gt;The Invisible Foundations of Biomedicine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/11/numpy-openblas-CZI-grant/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>Labs</category><category>NumPy</category><category>OpenBLAS</category><guid>https://labs.quansight.org/blog/2019/11/numpy-openblas-CZI-grant/</guid><pubDate>Thu, 14 Nov 2019 20:00:00 GMT</pubDate></item><item><title>File management improvements in Spyder4</title><link>https://labs.quansight.org/blog/2019/11/File-management-improvements-in-Spyder4/</link><dc:creator>Juanita Gomez &amp; Gonzalo Peña</dc:creator><description>&lt;div&gt;&lt;p&gt;Version 4.0 of &lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt;—a powerful Python IDE designed for scientists, engineers and data analysts—is almost ready! It has been in the making for well over two years, and it contains lots of interesting new features. We will focus on the Files pane in this post, where we've made several improvements to the interface and file management tools. &lt;/p&gt;
&lt;h3&gt;Simplified interface&lt;/h3&gt;
&lt;p&gt;In order to simplify the Files pane's interface, the columns corresponding to size and kind are hidden by default. To change which columns are shown, use the top-right pane menu or right-click the header directly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pane Menu" src="https://labs.quansight.org/images/spyder-files/pane-menu.png"&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/11/File-management-improvements-in-Spyder4/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/11/File-management-improvements-in-Spyder4/</guid><pubDate>Tue, 12 Nov 2019 17:00:00 GMT</pubDate></item><item><title>Quansight Labs Dask Update</title><link>https://labs.quansight.org/blog/2019/08/labs-dask-update/</link><dc:creator>James Bourbeau</dc:creator><description>&lt;div&gt;&lt;p&gt;This post provides an update on some recent &lt;a href="https://dask.org/"&gt;Dask&lt;/a&gt;-related activities the Quansight Labs team has been working on.&lt;/p&gt;
&lt;h3&gt;Dask community work order&lt;/h3&gt;
&lt;p&gt;Through a community work order (CWO) with &lt;a href="https://www.deshaw.com/"&gt;the D. E. Shaw group&lt;/a&gt;, the Quansight Labs team has been able to dedicate developer time towards bug fixes and feature requests for Dask. This work has touched on several portions of the Dask codebase, but generally have centered around using &lt;a href="https://docs.dask.org/en/latest/array.html"&gt;Dask Arrays&lt;/a&gt; with the &lt;a href="https://distributed.dask.org/en/latest/"&gt;distributed scheduler&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/08/labs-dask-update/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Dask</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/08/labs-dask-update/</guid><pubDate>Tue, 27 Aug 2019 05:00:00 GMT</pubDate></item><item><title>Spyder 4.0 beta4: Kite integration is here</title><link>https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/</link><dc:creator>Edgar Margffoy-Tuay</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://kite.com"&gt;Kite&lt;/a&gt; is sponsoring the work discussed in this blog post, and in addition supports Spyder 4.0 development through a Quansight Labs &lt;a href="http://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Community Work Order&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As part of our next release, we are proud to announce an additional completion client for Spyder, Kite. &lt;a href="https://kite.com/"&gt;Kite&lt;/a&gt; is a novel completion client that uses Machine Learning techniques to find and predict the best autocompletion for a given text. Additionally, it collects improved documentation for compiled packages, i.e., Matplotlib, NumPy, SciPy that cannot be obtained easily by using traditional code analysis packages such as Jedi.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt_text" src="https://labs.quansight.org/images/spyder-kite-hover.png" title="image_tooltip"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/</guid><pubDate>Fri, 16 Aug 2019 19:19:13 GMT</pubDate></item><item><title>Quansight presence at SciPy'19</title><link>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday the SciPy'19 conference ended. It was a lot of fun, and very productive. You can really feel that there's a lot of energy in the community, and that it's growing and maturing. This post is just a quick update to summarize Quansight's presence and contributions, as well as some of the more interesting things I noticed.&lt;/p&gt;
&lt;h3&gt;A few highlights&lt;/h3&gt;
&lt;p&gt;The "Open Source Communities" track, which had a strong emphasis on topics like burnout, diversity and sustainability, as well as the keynotes by Stuart Geiger ("&lt;em&gt;The Invisible Work of Maintaining and Sustaining Open-Source Software&lt;/em&gt;") and Carol Willing ("&lt;em&gt;Jupyter: Always Open for Learning and Discovery&lt;/em&gt;") showed that many more people and projects are paying more attention to and evolving their thinking on the human and organizational aspects of open source. &lt;/p&gt;
&lt;p&gt;I did not go to many technical talks, but did make sure to catch Matt Rocklin's talk "&lt;em&gt;Refactoring the SciPy Ecosystem for Heterogeneous Computing&lt;/em&gt;". Matt clearly explained some key issues and opportunities around the state of array computing libraries in Python - I highly recommend watching this talk.&lt;/p&gt;
&lt;p&gt;Abigail Cabunoc Mayes' talk "&lt;em&gt;Work Open, Lead Open (#WOLO) for Sustainability&lt;/em&gt;" was fascinating - it made me rethink the governance models and roles we use for our projects, and I worked on some of her concrete suggestions during the sprints.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>SciPy</category><guid>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</guid><pubDate>Mon, 15 Jul 2019 05:00:00 GMT</pubDate></item><item><title>Labs update and May highlights</title><link>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Time flies when you're having fun. Here is an update of some of the highlights
of my second month at Quansight Labs.&lt;/p&gt;
&lt;h3&gt;The making of a black hole image &amp;amp; GitHub Sponsors&lt;/h3&gt;
&lt;p&gt;Both Travis and myself were invited by GitHub to attend GitHub Satellite in
Berlin. The main reason was that Nat Friedman (GitHub CEO) decided to spend the
first 20 minutes of his keynote to highlight the &lt;a href="https://eventhorizontelescope.org/"&gt;Event Horizon
Telescope's&lt;/a&gt; black hole image and the open
source software that made that imaging possible. This included the scientific
Python very prominently - NumPy, Matplotlib, Python, Cython, SciPy, AstroPy and
other projects were highlighted. At the same time, Nat introduced new GitHub
features like "used by", a triaging role and new dependency graph features and
illustrated how those worked for NumPy. These features will be very welcome
news to maintainers of almost any project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Satellite'19 keynote, showcasing NumPy and Matplotlib" src="https://labs.quansight.org/images/githubsatellite_keynote_numpy_matplotlib.png"&gt;&lt;/p&gt;
&lt;p&gt;The single most visible feature introduced was &lt;strong&gt;GitHub Sponsors&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Sponsors enabled on the NumPy repo" src="https://labs.quansight.org/images/github_sponsors_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed meeting &lt;a href="https://devonzuegel.com"&gt;Devon Zuegel&lt;/a&gt;, Product
Manager of the Open Source Economy Team at GitHub, in person after previously
having had the chance to exchange ideas with her about the funding related
needs of scientific Python projects and their core teams. I'm confident that
GitHub Sponsors will evolve in a direction that's beneficial to
community-driven open source projects.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</guid><pubDate>Wed, 12 Jun 2019 05:00:00 GMT</pubDate></item><item><title>TDK-Micronas partners with Quansight to sponsor Spyder</title><link>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs.
This will enable the development of some features that have been requested by
our users, as well as new features that will help TDK develop custom Spyder
plugins in order to complement their Automatic Test Equipment (ATE’s) in the
development of their Application Specific Integrated Circuits (ASIC’s).&lt;/p&gt;
&lt;p&gt;At this point it may be useful to clarify the relationship the role of
Quansight Labs in Spyder's development and the relationship with TDK. To quote
Ralf Gommers (director of Quansight Labs):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"We're an R&amp;amp;D lab for open source development of core technologies around data
science and scientific computing in Python. And focused on growing communities
around those technologies. That's how I see it for Spyder as well: Quansight
Labs enables developers to be employed to work on Spyder, and helps with
connecting them to developers of other projects in similar situations. Labs
should be an enabler to let the Spyder project, its community and individual
developers grow. And Labs provides mechanisms to attract and coordinate
funding. Of course the project is still independent. If there are other
funding sources, e.g. donations from individuals to Spyder via OpenCollective,
all the better."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Multiple Projects aka Workspaces&lt;/h3&gt;
&lt;p&gt;In its current state Spyder can only handle one active project at a time.
Although in the past we had basic support for workspaces, it was never a fully
functional feature, so to ease development and simplify the user experience,
we decided to remove it in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</guid><pubDate>Sun, 02 Jun 2019 05:00:00 GMT</pubDate></item><item><title>Community-driven open source and funded development</title><link>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Quansight Labs is an experiment for us in a way. One of our main aims is to
channel more resources into community-driven PyData projects, to keep them
healthy and accelerate their development. &lt;em&gt;And do so in a way that projects
themselves stay in charge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post explains one method we're starting to use for this. I'm writing it
to be transparent with projects, the wider community and potential funders
about what we're starting to do. As well as to explicitly solicit feedback on
this method.&lt;/p&gt;
&lt;h3&gt;Community work orders&lt;/h3&gt;
&lt;p&gt;If you talk to someone about supporting an open source project, in particular a
well-known one that they rely on (e.g. NumPy, Jupyter, Pandas), they're often
willing to listen and help. What you quickly learn though is that they want
to know in some detail what will be done with the funds provided. This is
true not only for companies, but also for individuals. In addition, companies
will likely want a written agreement and some form of reporting about the
progress of the work. To meet this need we came up with &lt;em&gt;community work
orders&lt;/em&gt; (CWOs) - agreements that outline what work will be done on a project
(implementing new features, release management, improving documentation,
etc.) and outlining a reporting mechanism. What makes a CWO different from a
consulting contract? Key differences are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be work that is done on the open source project itself (and not e.g.
   on a plugin for it, or a customization for the client).&lt;/li&gt;
&lt;li&gt;The developers must have a reasonable amount of freedom to decide what to
   work on and what the technical approach will be, within the broad scope of
   the agreement.&lt;/li&gt;
&lt;li&gt;Deliverables cannot be guaranteed to end up in a project; instead the funder
   gets the promise of a best effort of implementation and working with the
   community.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Respecting community processes&lt;/h3&gt;
&lt;p&gt;Point 3 above is particularly important: &lt;em&gt;we must respect how open source
projects make decisions&lt;/em&gt;. If the project maintainers decide that they don't
want to include a particular change or new feature, that's their decision to
make. Any code change proposed as part of work on a CWO has to go through the
same review process as any other change, and be accepted on its merits. The
argument "but someone paid for this" isn't particularly strong, nor is one
that reviewers should have to care about. Now of course we don't expect it to
be common for work to be rejected. An important part of the Quansight value
proposition is that because we understand how open source works and many of
our developers are maintainers and contributors of the open source projects
already, we propose work that the community already has interest in and we
open the discussion about any major code change early to avoid issues.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</guid><pubDate>Wed, 29 May 2019 05:00:00 GMT</pubDate></item></channel></rss>