<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs</title><link>https://labs.quansight.org/</link><description>Quansight Labs site: blog, development and project overview</description><atom:link href="https://labs.quansight.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Tue, 21 May 2019 20:11:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Spyder 4.0 takes a big step closer with the release of Beta 2!</title><link>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been almost two months since I joined Quansight in April, to start 
working on Spyder maintenance and 
development. So far, it has been a very exciting and rewarding journey under 
the guidance of long time Spyder maintainer
&lt;a href="https://github.com/ccordoba12"&gt;Carlos Córdoba&lt;/a&gt;.
This is the first of a series of blog posts we will be writing to showcase 
updates on the development of Spyder, new planned features and news on the 
road to Spyder 4.0 and beyond.&lt;/p&gt;
&lt;p&gt;First off, I would like to give a warm welcome to
&lt;a href="https://github.com/andfoy"&gt;Edgar Margffoy&lt;/a&gt;,
who recently joined Quansight and will be working with the Spyder team to
take its development even further. Edgar has been a core Spyder developer 
for more than two years now, and we are very excited to have his (almost)
full-time commitment to the project.&lt;/p&gt;
&lt;h2&gt;Spyder 4.0 Beta 2 released!&lt;/h2&gt;
&lt;p&gt;Since August 2018, when the first beta of the 4.x series was released, the
Spyder development team has been working hard on our next release.
Over the past year, we've implemented the long awaited full-interface dark theme;
overhauled our entire code completion and linting architecture to use the
&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;,
opening the door to supporting many other languages in the future;
added a new Plots pane to view and manage the figures generated by your code;
and numerous other feature enhancements, bug fixes and internal improvements.&lt;/p&gt;
&lt;h3&gt;Dark theme&lt;/h3&gt;
&lt;p&gt;A full-interface dark theme has been a
&lt;a href="https://github.com/spyder-ide/spyder/issues/2350"&gt;long awaited feature&lt;/a&gt;,
and is enabled by default in Spyder 4. You can still select the
light theme under  &lt;code&gt;Preferences &amp;gt; Appearance&lt;/code&gt; by either choosing a light-background
syntax-highlighting scheme, or changing &lt;code&gt;Interface theme&lt;/code&gt; to &lt;code&gt;Light&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Spyder main window with default panes, with the dark theme applied across the entire interface" src="https://labs.quansight.org/images/spyder-qdarkstyle.png"&gt;&lt;/p&gt;
&lt;p&gt;Pretty, right :-) ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</guid><pubDate>Tue, 21 May 2019 20:02:50 GMT</pubDate></item><item><title>Labs update and April highlights</title><link>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been an exciting first month for me at Quansight Labs. It's a good time
for a summary of what we worked on in April and what is coming next.&lt;/p&gt;
&lt;h3&gt;Progress on array computing libraries&lt;/h3&gt;
&lt;p&gt;Our first bucket of activities I'd call "innovation". The most prominent
projects in this bucket are &lt;a href="https://xnd.io/"&gt;XND&lt;/a&gt;,
&lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;uarray&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/metadsl"&gt;metadsl&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/python-moa"&gt;python-moa&lt;/a&gt;,
&lt;a href="https://github.com/xnd-project/rbc"&gt;Remote Backend Compiler&lt;/a&gt; and
&lt;a href="https://github.com/xnd-project/arrayviews"&gt;arrayviews&lt;/a&gt;.
XND is an umbrella name for a set of related array
computing libraries: &lt;code&gt;xnd&lt;/code&gt;, &lt;code&gt;ndtypes&lt;/code&gt;, &lt;code&gt;gumath&lt;/code&gt;, and &lt;code&gt;xndtools&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hameer Abbasi made some major steps forward with &lt;code&gt;uarray&lt;/code&gt;: the backend and
coercion semantics are now largely worked out, there is
good &lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;, and the
&lt;code&gt;unumpy&lt;/code&gt; package (which currently has &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;XND&lt;/code&gt; and &lt;code&gt;PyTorch&lt;/code&gt; backends)
is progressing well. This &lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;blog post&lt;/a&gt;
gives a good overview of the motivation for &lt;code&gt;uarray&lt;/code&gt; and its main concepts.&lt;/p&gt;
&lt;p&gt;Saul Shanabrook and Chris Ostrouchov worked out how best to put &lt;code&gt;metadsl&lt;/code&gt;
and &lt;code&gt;python-moa&lt;/code&gt; together: &lt;code&gt;metadsl&lt;/code&gt; can be used to create the API for
&lt;code&gt;python-moa&lt;/code&gt; to simplify the code base of the latter a lot. Chris 
also wrote an interesting &lt;a href="https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/"&gt;blog post&lt;/a&gt;
explaining the MoA principles.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</guid><pubDate>Fri, 03 May 2019 05:00:00 GMT</pubDate></item><item><title>What's New in SymPy 1.4</title><link>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;, under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow. As a part of this, I
am able to spend a fraction of my time working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;SymPy 1.4 was released on April 9, 2019. In this post, I'd like to go over
some of the highlights for this release. The full release notes for the
release can be found on the &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4"&gt;SymPy
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To update to SymPy 1.4, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;conda install sympy
&lt;/pre&gt;


&lt;p&gt;or if you prefer to use pip&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pip install -U sympy
&lt;/pre&gt;


&lt;p&gt;The SymPy 1.4 release contains over &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;500 changes from 38 different
submodules&lt;/a&gt;,
so I will not be going over every change, but only a few of the main
highlights. A &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;total of 104
people&lt;/a&gt;
contributed to this release, of whom 66 contributed for the first time for
this release.&lt;/p&gt;
&lt;p&gt;While I did not personally work on any of the changes listed below (my work
for this release tended to be more invisible, behind the scenes fixes), I did
do the release itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>sympy</category><guid>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</guid><pubDate>Thu, 02 May 2019 05:00:00 GMT</pubDate></item><item><title>uarray: A Generic Override Framework for Methods</title><link>https://labs.quansight.org/blog/2019/04/uarray-intro/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="uarray:-A-Generic-Override-Framework-for-Methods"&gt;&lt;code&gt;uarray&lt;/code&gt;: A Generic Override Framework for Methods&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#uarray:-A-Generic-Override-Framework-for-Methods"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;uarray&lt;/code&gt; is an override framework for methods in Python. In the scientific Python ecosystem, and in other similar places, there has been one recurring problem: That similar tools to do a job have existed, but don't conform to a single, well-defined API. &lt;code&gt;uarray&lt;/code&gt; tries to solve this problem in general, but also for the scientific Python ecosystem in particular, by defining APIs independent of their implementations.&lt;/p&gt;
&lt;h3 id="Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;Array Libraries in the Scientific Python Ecosystem&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When SciPy was created, and Numeric and Numarray unified into NumPy, it jump-started Python's data science community. The ecosystem grew quickly: Academics started moving to SciPy, and the Scikits that popped up made the transition all the more smooth.&lt;/p&gt;
&lt;p&gt;However, the scientific Python community also shifted during that time: GPUs and distributed computing emerged. Also, there were old ideas that couldn't really be used with NumPy's API, such as sparse arrays. To solve these problems, various libraries emerged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dask, for distributed NumPy&lt;/li&gt;
&lt;li&gt;CuPy, for NumPy on Nvidia-branded GPUs.&lt;/li&gt;
&lt;li&gt;PyData/Sparse, a project started to make sparse arrays conform to the NumPy API&lt;/li&gt;
&lt;li&gt;Xnd, which extends the type system and the universal function concept found in NumPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/04/uarray-intro/</guid><pubDate>Tue, 30 Apr 2019 05:04:40 GMT</pubDate></item><item><title>MOA: a theory for composable and verifiable tensor computations</title><link>https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/</link><dc:creator>Chris Ostrouchov</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Python-moa (mathematics of arrays) is an approach to a high level tensor
compiler that is based on the work of &lt;a href="https://www.albany.edu/ceas/lenore-mullin.php"&gt;Lenore
Mullin&lt;/a&gt; and her
&lt;a href="https://www.researchgate.net/publication/308893116_A_Mathematics_of_Arrays"&gt;dissertation&lt;/a&gt;.
A high level compiler is necessary because there are many optimizations
that a low level compiler such as &lt;code&gt;gcc&lt;/code&gt; will miss. It is trying to solve
many of the same problems as other technologies such as the &lt;a href="http://tensor-compiler.org/"&gt;taco
compiler&lt;/a&gt; and the &lt;a href="https://www.tensorflow.org/xla"&gt;xla
compiler&lt;/a&gt;. However, it takes a much
different approach than others guided by the following principles.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the shape? Everything has a shape. scalars, vectors, arrays,
operations, and functions.&lt;/li&gt;
&lt;li&gt;What are the given indicies and operations required to produce a
given index in the result?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having a compiler that is guided upon these principles allows for high
level reductions that other compilers will miss and allows for
optimization of algorithms as a whole. Keep in mind that MOA is &lt;strong&gt;NOT&lt;/strong&gt;
a compiler. It is a theory that guides compiler development. Since
&lt;a href="https://github.com/Quansight-Labs/python-moa"&gt;python-moa&lt;/a&gt; is based on
theory we get unique properties that other compilers cannot guarantee:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/</guid><pubDate>Wed, 17 Apr 2019 05:00:00 GMT</pubDate></item><item><title>Thoughts on joining Quansight Labs</title><link>https://labs.quansight.org/blog/2019/04/joining-labs/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;In his &lt;a href="https://www.quansight.com/single-post/2019/04/02/Welcoming-Ralf-Gommers-as-Director-of-Quansight-Labs"&gt;blog post&lt;/a&gt; welcoming me, Travis set out his vision for pushing forward the Python ecosystem for scientific computing and data science, and how to fund it. In this post I'll add my own perspectives to that. Given that Quansight Labs' purpose, it seems fitting to start with how I see things as a community member and organizer.&lt;/p&gt;
&lt;h4&gt;A community perspective&lt;/h4&gt;
&lt;p&gt;The SciPy and PyData ecosystems have experienced massive growth over the past years, and this is likely to continue in the near future. As a maintainer, that feels very gratifying. At the same time it brings up worries. Core projects struggle to keep up with the growth in number of users. Funded development can help with this, if done right. Some of the things I would like to see from companies that participate in the ecosystem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explain innovations they're working on to the community and solicit input, &lt;em&gt;at an early stage&lt;/em&gt;. Developing something away from the spotlight and then unveiling it as the "next big thing" once it's done usually leads to either corporate-driven projects (if users adopt it) or a short life span.&lt;/li&gt;
&lt;li&gt;Participate in a sustainable way. This means for example to contribute in a way that lowers, or at least doesn't increase, the overall effort required for maintenance. Only sending pull requests with new features doesn't achieve that. Solving maintenance pain points or helping with code review does.&lt;/li&gt;
&lt;li&gt;Operate transparently. Develop in the open, plan in the open, be clear about directions and motivations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/joining-labs/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/04/joining-labs/</guid><pubDate>Mon, 08 Apr 2019 05:00:00 GMT</pubDate></item></channel></rss>