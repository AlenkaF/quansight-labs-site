<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs</title><link>https://labs.quansight.org/</link><description>Quansight Labs site: blog, development and project overview</description><atom:link href="https://labs.quansight.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Wed, 03 Jul 2019 17:43:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>uarray update: API changes, overhead and comparison to __array_function__</title><link>https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;uarray&lt;/code&gt; is a generic override framework for objects and methods in Python. Since &lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;my last &lt;code&gt;uarray&lt;/code&gt; blogpost&lt;/a&gt;, there have been plenty of developments, changes to the API and improvements to the overhead of the protocol. Let’s begin with a walk-through of the current feature set and API, and then move on to current developments and how it compares to &lt;a href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/www.numpy.org/neps/nep-0018-array-function-protocol.html"&gt;&lt;code&gt;__array_function__&lt;/code&gt;&lt;/a&gt;. For further details on the API and latest developments, please see &lt;a href="https://uarray.readthedocs.io/en/latest/generated/uarray.html"&gt;the API page for &lt;code&gt;uarray&lt;/code&gt;&lt;/a&gt;. The examples there are doctested, so they will always be current.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Enable __array_function__ for NumPy &amp;lt; 1.17.0&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;NUMPY_EXPERIMENTAL_ARRAY_FUNCTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uarray&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ua&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In &lt;code&gt;uarray&lt;/code&gt;, the fundamental building block is a multimethod. Multimethods have a number of nice properties, such as automatic dispatch based on backends. It is important to note here that multimethods will be written by API authors, rather than implementors. Here's how we define a multimethod in &lt;code&gt;uarray&lt;/code&gt;:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/</guid><pubDate>Wed, 03 Jul 2019 11:36:54 GMT</pubDate></item><item><title>Labs update and May highlights</title><link>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Time flies when you're having fun. Here is an update of some of the highlights
of my second month at Quansight Labs.&lt;/p&gt;
&lt;h3&gt;The making of a black hole image &amp;amp; GitHub Sponsors&lt;/h3&gt;
&lt;p&gt;Both Travis and myself were invited by GitHub to attend GitHub Satellite in
Berlin. The main reason was that Nat Friedman (GitHub CEO) decided to spend the
first 20 minutes of his keynote to highlight the &lt;a href="https://eventhorizontelescope.org/"&gt;Event Horizon
Telescope's&lt;/a&gt; black hole image and the open
source software that made that imaging possible. This included the scientific
Python very prominently - NumPy, Matplotlib, Python, Cython, SciPy, AstroPy and
other projects were highlighted. At the same time, Nat introduced new GitHub
features like "used by", a triaging role and new dependency graph features and
illustrated how those worked for NumPy. These features will be very welcome
news to maintainers of almost any project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Satellite'19 keynote, showcasing NumPy and Matplotlib" src="https://labs.quansight.org/images/githubsatellite_keynote_numpy_matplotlib.png"&gt;&lt;/p&gt;
&lt;p&gt;The single most visible feature introduced was &lt;strong&gt;GitHub Sponsors&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Sponsors enabled on the NumPy repo" src="https://labs.quansight.org/images/github_sponsors_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed meeting &lt;a href="https://devonzuegel.com"&gt;Devon Zuegel&lt;/a&gt;, Product
Manager of the Open Source Economy Team at GitHub, in person after previously
having had the chance to exchange ideas with her about the funding related
needs of scientific Python projects and their core teams. I'm confident that
GitHub Sponsors will evolve in a direction that's beneficial to
community-driven open source projects.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</guid><pubDate>Wed, 12 Jun 2019 05:00:00 GMT</pubDate></item><item><title>TDK-Micronas partners with Quansight to sponsor Spyder</title><link>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs.
This will enable the development of some features that have been requested by
our users, as well as new features that will help TDK develop custom Spyder
plugins in order to complement their Automatic Test Equipment (ATE’s) in the
development of their Application Specific Integrated Circuits (ASIC’s).&lt;/p&gt;
&lt;p&gt;At this point it may be useful to clarify the relationship the role of
Quansight Labs in Spyder's development and the relationship with TDK. To quote
Ralf Gommers (director of Quansight Labs):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"We're an R&amp;amp;D lab for open source development of core technologies around data
science and scientific computing in Python. And focused on growing communities
around those technologies. That's how I see it for Spyder as well: Quansight
Labs enables developers to be employed to work on Spyder, and helps with
connecting them to developers of other projects in similar situations. Labs
should be an enabler to let the Spyder project, its community and individual
developers grow. And Labs provides mechanisms to attract and coordinate
funding. Of course the project is still independent. If there are other
funding sources, e.g. donations from individuals to Spyder via OpenCollective,
all the better."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Multiple Projects aka Workspaces&lt;/h3&gt;
&lt;p&gt;In its current state Spyder can only handle one active project at a time.
Although in the past we had basic support for workspaces, it was never a fully
functional feature, so to ease development and simplify the user experience,
we decided to remove it in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</guid><pubDate>Sun, 02 Jun 2019 05:00:00 GMT</pubDate></item><item><title>metadsl: A Framework for Domain Specific Languages in Python</title><link>https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/</link><dc:creator>Saul Shanabrook</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="metadsl:-A-Framework-for-Domain-Specific-Languages-in-Python"&gt;&lt;a href="https://github.com/quansight-labs/metadsl"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt;: A Framework for Domain Specific Languages in Python&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/#metadsl:-A-Framework-for-Domain-Specific-Languages-in-Python"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hello, my name is Saul Shanabrook and for the past year or so I have been at Quansight exploring the array computing ecosystem. This started with working on the &lt;a href="https://xnd.io/"&gt;xnd project&lt;/a&gt;, a set of low level primitives to help build cross platform NumPy-like APIs, and then &lt;a href="https://github.com/saulshanabrook/moa"&gt;started&lt;/a&gt; &lt;a href="https://github.com/saulshanabrook/moa"&gt;exploring&lt;/a&gt; Lenore Mullin's work on a mathematics of arrays. After spending quite a bit of time working on an integrated solution built on these concepts, I decided to step back to try to generalize and simplify the core concepts. The trickiest part was not actually compiling mathematical descriptions of array operations in Python, but figuring out how to make it useful to existing users. To do this, we need to meet users where they are at, which is with the APIs they are already familiar with, like &lt;code&gt;numpy&lt;/code&gt;. The goal of &lt;code&gt;metadsl&lt;/code&gt; is to make it easier to tackle parts of this problem seperately so that we can collaborate on tackling it together.&lt;/p&gt;
&lt;h3 id="Libraries-for-Scientific-Computing"&gt;Libraries for Scientific Computing&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/#Libraries-for-Scientific-Computing"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Much of the recent rise of Python's popularity is due to its usage for scientific computing and machine learning. This work is built on different frameworks, like Pandas, NumPy, Tensorflow, and scikit-learn. Each of these are meant to be used from Python, but have their own concepts and abstractions to learn on top of the core language, so we can look at them as Domain Specific Languages (DSLs). As the ecosystem has matured, we are now demanding more flexibility for how these languages are executed. Dask gives us a way to write Pandas or NumPy and execute it across many cores or computers, Ibis allows us to write Pandas but on a SQL database, with CuPy we can execute NumPy on our GPU, and with Numba we can optimize our NumPy expession on a CPU or GPU. These projects prove that it is possible to write optimizing compilers that target varying hardware paradigms for existing Python numeric APIs. However, this isn't straightforward and these projects success is a testament to the perserverence and ingenuity of the authors. We need to make it easy to add reusable optimizations to libraries like these, so that we can support the latest hardware and compiler optimizations from Python. &lt;a href="https://github.com/quansight-labs/metadsl"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt; is meant to be a place to come together to build a framework for DSLs in Python. It provides a way to seperate the user experience from the the specific of execution, to enable consistency and flexibility for users. In this post, I will go through an example of creating a very basic DSL. It will not use the &lt;code&gt;metadsl&lt;/code&gt; library, but will created in the same style as &lt;code&gt;metadsl&lt;/code&gt; to illustrate its basic principles.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/</guid><pubDate>Fri, 31 May 2019 05:00:00 GMT</pubDate></item><item><title>Community-driven open source and funded development</title><link>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Quansight Labs is an experiment for us in a way. One of our main aims is to
channel more resources into community-driven PyData projects, to keep them
healthy and accelerate their development. &lt;em&gt;And do so in a way that projects
themselves stay in charge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post explains one method we're starting to use for this. I'm writing it
to be transparent with projects, the wider community and potential funders
about what we're starting to do. As well as to explicitly solicit feedback on
this method.&lt;/p&gt;
&lt;h3&gt;Community work orders&lt;/h3&gt;
&lt;p&gt;If you talk to someone about supporting an open source project, in particular a
well-known one that they rely on (e.g. NumPy, Jupyter, Pandas), they're often
willing to listen and help. What you quickly learn though is that they want
to know in some detail what will be done with the funds provided. This is
true not only for companies, but also for individuals. In addition, companies
will likely want a written agreement and some form of reporting about the
progress of the work. To meet this need we came up with &lt;em&gt;community work
orders&lt;/em&gt; (CWOs) - agreements that outline what work will be done on a project
(implementing new features, release management, improving documentation,
etc.) and outlining a reporting mechanism. What makes a CWO different from a
consulting contract? Key differences are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be work that is done on the open source project itself (and not e.g.
   on a plugin for it, or a customization for the client).&lt;/li&gt;
&lt;li&gt;The developers must have a reasonable amount of freedom to decide what to
   work on and what the technical approach will be, within the broad scope of
   the agreement.&lt;/li&gt;
&lt;li&gt;Deliverables cannot be guaranteed to end up in a project; instead the funder
   gets the promise of a best effort of implementation and working with the
   community.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Respecting community processes&lt;/h3&gt;
&lt;p&gt;Point 3 above is particularly important: &lt;em&gt;we must respect how open source
projects make decisions&lt;/em&gt;. If the project maintainers decide that they don't
want to include a particular change or new feature, that's their decision to
make. Any code change proposed as part of work on a CWO has to go through the
same review process as any other change, and be accepted on its merits. The
argument "but someone paid for this" isn't particularly strong, nor is one
that reviewers should have to care about. Now of course we don't expect it to
be common for work to be rejected. An important part of the Quansight value
proposition is that because we understand how open source works and many of
our developers are maintainers and contributors of the open source projects
already, we propose work that the community already has interest in and we
open the discussion about any major code change early to avoid issues.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</guid><pubDate>Wed, 29 May 2019 05:00:00 GMT</pubDate></item><item><title>Measuring API usage for popular numerical and scientific libraries</title><link>https://labs.quansight.org/blog/2019/05/python-package-function-usage/</link><dc:creator>Christopher Ostrouchov</dc:creator><description>&lt;div&gt;&lt;p&gt;Developers of open source software often have a difficult time
understanding how others utilize their libraries. Having better data of
when and how functions are being used has many benefits. Some of these
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better API design&lt;/li&gt;
&lt;li&gt;determining whether or not a feature can be deprecated or removed.&lt;/li&gt;
&lt;li&gt;more instructive tutorials&lt;/li&gt;
&lt;li&gt;understanding the adoption of new features&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python Namespace Inspection&lt;/h2&gt;
&lt;p&gt;We wrote a general tool
&lt;a href="https://github.com/Quansight-Labs/python-api-inspect"&gt;python-api-inspect&lt;/a&gt;
to analyze any function/attribute call within a given set of
namespaces in a repository. This work was heavily inspired by a blog
post on inspecting method usage with
&lt;a href="https://galeascience.wordpress.com/2016/08/10/top-10-pandas-numpy-and-scipy-functions-on-github/"&gt;Google BigQuery&lt;/a&gt;
for &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;,
&lt;a href="https://www.numpy.org/"&gt;NumPy&lt;/a&gt;, and
&lt;a href="https://www.scipy.org/"&gt;SciPy&lt;/a&gt;. The previously mentioned work used
regular expressions to search for method usage. The primary issue with
this approach is that it cannot handle &lt;code&gt;import numpy.random as rand;
rand.random(...)&lt;/code&gt; unless additional regular expressions are
constructed for each case and will result in false
positives. Additionally,
&lt;a href="https://cloud.google.com/bigquery/"&gt;BigQuery&lt;/a&gt; is not a free resource.
Thus, this approach is not general enough and does not scale well with
the number of libraries that we would like to inspect function and
attribute usage.&lt;/p&gt;
&lt;p&gt;A more robust approach is to inspect the Python abstract syntax tree
(AST). Python comes with a performant method from the &lt;a href="https://docs.python.org/3/library/ast.html"&gt;ast
module&lt;/a&gt; &lt;code&gt;ast.parse(...)&lt;/code&gt;
for constructing a Python AST from source code. A &lt;a href="https://docs.python.org/3/library/ast.html#ast.NodeVisitor"&gt;node
visitor&lt;/a&gt;
is used to traverse the AST and record &lt;code&gt;import&lt;/code&gt; statements, and
function/attribute calls. This allows us to catch any absolute
namespace reference. The following are cases that
&lt;a href="https://github.com/Quansight-Labs/python-api-inspect"&gt;python-api-inspect&lt;/a&gt;
catches:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/python-package-function-usage/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/python-package-function-usage/</guid><pubDate>Mon, 27 May 2019 05:00:00 GMT</pubDate></item><item><title>Spyder 4.0 takes a big step closer with the release of Beta 2!</title><link>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been almost two months since I joined Quansight in April, to start 
working on Spyder maintenance and 
development. So far, it has been a very exciting and rewarding journey under 
the guidance of long time Spyder maintainer
&lt;a href="https://github.com/ccordoba12"&gt;Carlos Córdoba&lt;/a&gt;.
This is the first of a series of blog posts we will be writing to showcase 
updates on the development of Spyder, new planned features and news on the 
road to Spyder 4.0 and beyond.&lt;/p&gt;
&lt;p&gt;First off, I would like to give a warm welcome to
&lt;a href="https://github.com/andfoy"&gt;Edgar Margffoy&lt;/a&gt;,
who recently joined Quansight and will be working with the Spyder team to
take its development even further. Edgar has been a core Spyder developer 
for more than two years now, and we are very excited to have his (almost)
full-time commitment to the project.&lt;/p&gt;
&lt;h2&gt;Spyder 4.0 Beta 2 released!&lt;/h2&gt;
&lt;p&gt;Since August 2018, when the first beta of the 4.x series was released, the
Spyder development team has been working hard on our next release.
Over the past year, we've implemented the long awaited full-interface dark theme;
overhauled our entire code completion and linting architecture to use the
&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;,
opening the door to supporting many other languages in the future;
added a new Plots pane to view and manage the figures generated by your code;
and numerous other feature enhancements, bug fixes and internal improvements.&lt;/p&gt;
&lt;h3&gt;Dark theme&lt;/h3&gt;
&lt;p&gt;A full-interface dark theme has been a
&lt;a href="https://github.com/spyder-ide/spyder/issues/2350"&gt;long awaited feature&lt;/a&gt;,
and is enabled by default in Spyder 4. You can still select the
light theme under  &lt;code&gt;Preferences &amp;gt; Appearance&lt;/code&gt; by either choosing a light-background
syntax-highlighting scheme, or changing &lt;code&gt;Interface theme&lt;/code&gt; to &lt;code&gt;Light&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Spyder main window with default panes, with the dark theme applied across the entire interface" src="https://labs.quansight.org/images/spyder-qdarkstyle.png"&gt;&lt;/p&gt;
&lt;p&gt;Pretty, right :-) ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/05/spyder-4-beta2-release/</guid><pubDate>Tue, 21 May 2019 20:02:50 GMT</pubDate></item><item><title>Labs update and April highlights</title><link>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;It has been an exciting first month for me at Quansight Labs. It's a good time
for a summary of what we worked on in April and what is coming next.&lt;/p&gt;
&lt;h3&gt;Progress on array computing libraries&lt;/h3&gt;
&lt;p&gt;Our first bucket of activities I'd call "innovation". The most prominent
projects in this bucket are &lt;a href="https://xnd.io/"&gt;XND&lt;/a&gt;,
&lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;uarray&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/metadsl"&gt;metadsl&lt;/a&gt;,
&lt;a href="https://github.com/Quansight-Labs/python-moa"&gt;python-moa&lt;/a&gt;,
&lt;a href="https://github.com/xnd-project/rbc"&gt;Remote Backend Compiler&lt;/a&gt; and
&lt;a href="https://github.com/xnd-project/arrayviews"&gt;arrayviews&lt;/a&gt;.
XND is an umbrella name for a set of related array
computing libraries: &lt;code&gt;xnd&lt;/code&gt;, &lt;code&gt;ndtypes&lt;/code&gt;, &lt;code&gt;gumath&lt;/code&gt;, and &lt;code&gt;xndtools&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hameer Abbasi made some major steps forward with &lt;code&gt;uarray&lt;/code&gt;: the backend and
coercion semantics are now largely worked out, there is
good &lt;a href="https://uarray.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;, and the
&lt;code&gt;unumpy&lt;/code&gt; package (which currently has &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;XND&lt;/code&gt; and &lt;code&gt;PyTorch&lt;/code&gt; backends)
is progressing well. This &lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;blog post&lt;/a&gt;
gives a good overview of the motivation for &lt;code&gt;uarray&lt;/code&gt; and its main concepts.&lt;/p&gt;
&lt;p&gt;Saul Shanabrook and Chris Ostrouchov worked out how best to put &lt;code&gt;metadsl&lt;/code&gt;
and &lt;code&gt;python-moa&lt;/code&gt; together: &lt;code&gt;metadsl&lt;/code&gt; can be used to create the API for
&lt;code&gt;python-moa&lt;/code&gt; to simplify the code base of the latter a lot. Chris 
also wrote an interesting &lt;a href="https://labs.quansight.org/blog/2019/04/python-moa-tensor-compiler/"&gt;blog post&lt;/a&gt;
explaining the MoA principles.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/labs-update-april-highlights/</guid><pubDate>Fri, 03 May 2019 05:00:00 GMT</pubDate></item><item><title>What's New in SymPy 1.4</title><link>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;, under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow. As a part of this, I
am able to spend a fraction of my time working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;SymPy 1.4 was released on April 9, 2019. In this post, I'd like to go over
some of the highlights for this release. The full release notes for the
release can be found on the &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4"&gt;SymPy
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To update to SymPy 1.4, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;conda install sympy
&lt;/pre&gt;


&lt;p&gt;or if you prefer to use pip&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pip install -U sympy
&lt;/pre&gt;


&lt;p&gt;The SymPy 1.4 release contains over &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;500 changes from 38 different
submodules&lt;/a&gt;,
so I will not be going over every change, but only a few of the main
highlights. A &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;total of 104
people&lt;/a&gt;
contributed to this release, of whom 66 contributed for the first time for
this release.&lt;/p&gt;
&lt;p&gt;While I did not personally work on any of the changes listed below (my work
for this release tended to be more invisible, behind the scenes fixes), I did
do the release itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>sympy</category><guid>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</guid><pubDate>Thu, 02 May 2019 05:00:00 GMT</pubDate></item><item><title>uarray: A Generic Override Framework for Methods</title><link>https://labs.quansight.org/blog/2019/04/uarray-intro/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="uarray:-A-Generic-Override-Framework-for-Methods"&gt;&lt;code&gt;uarray&lt;/code&gt;: A Generic Override Framework for Methods&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#uarray:-A-Generic-Override-Framework-for-Methods"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;uarray&lt;/code&gt; is an override framework for methods in Python. In the scientific Python ecosystem, and in other similar places, there has been one recurring problem: That similar tools to do a job have existed, but don't conform to a single, well-defined API. &lt;code&gt;uarray&lt;/code&gt; tries to solve this problem in general, but also for the scientific Python ecosystem in particular, by defining APIs independent of their implementations.&lt;/p&gt;
&lt;h3 id="Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;Array Libraries in the Scientific Python Ecosystem&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/04/uarray-intro/#Array-Libraries-in-the-Scientific-Python-Ecosystem"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When SciPy was created, and Numeric and Numarray unified into NumPy, it jump-started Python's data science community. The ecosystem grew quickly: Academics started moving to SciPy, and the Scikits that popped up made the transition all the more smooth.&lt;/p&gt;
&lt;p&gt;However, the scientific Python community also shifted during that time: GPUs and distributed computing emerged. Also, there were old ideas that couldn't really be used with NumPy's API, such as sparse arrays. To solve these problems, various libraries emerged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dask, for distributed NumPy&lt;/li&gt;
&lt;li&gt;CuPy, for NumPy on Nvidia-branded GPUs.&lt;/li&gt;
&lt;li&gt;PyData/Sparse, a project started to make sparse arrays conform to the NumPy API&lt;/li&gt;
&lt;li&gt;Xnd, which extends the type system and the universal function concept found in NumPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/04/uarray-intro/</guid><pubDate>Tue, 30 Apr 2019 05:04:40 GMT</pubDate></item></channel></rss>