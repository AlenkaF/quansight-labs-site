<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs</title><link>https://labs.quansight.org/</link><description>Quansight Labs site: blog, development and project overview</description><atom:link href="https://labs.quansight.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Sun, 29 Sep 2019 12:25:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Ruby wrappers for the XND project</title><link>https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/</link><dc:creator>Sameer Deshmukh (@v0dro)</dc:creator><description>&lt;div&gt;&lt;!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again --&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#ndtypes"&gt;Ndtypes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#usage"&gt;Usage&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#basic-initialization"&gt;Basic initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#concrete-vs-abstract-types"&gt;Concrete Vs. Abstract Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#typedefs"&gt;Typedefs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#usage-via-the-c-api"&gt;Usage via The C API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#xnd"&gt;Xnd&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#basic-usage"&gt;Basic Usage&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#data-type-support"&gt;Data Type Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#missing-values"&gt;Missing Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#usage-via-the-c-api"&gt;Usage via The C API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#gumath"&gt;Gumath&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#usage"&gt;Usage&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#usage-via-the-c-api"&gt;Usage via The C API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#automatic-kernel-generation"&gt;Automatic Kernel Generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/#conclusion-and-future-work"&gt;Conclusion and Future Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown-toc end --&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Lack of stable and reliable scientific computing software has been a persistent problem
for the Ruby community, making it hard for enthusiastic Ruby developers to use Ruby in
everything from their web applications to their data analysis projects. One of the most important
components of any successful scientific software stack is a well maintained and flexible
array computation library that can act as a fast and simple way of storing in-memory data
and interfacing it with various fast and battle-tested libraries like LAPACK and BLAS.&lt;/p&gt;
&lt;p&gt;Various projects have attempted to make such libraries in the past (and some are still thriving
and maintained). Some of the notable ones are &lt;a href="https://github.com/ruby-numo"&gt;numo&lt;/a&gt;, &lt;a href="https://github.com/SciRuby/nmatrix"&gt;nmatrix&lt;/a&gt;, and more recently, &lt;a href="https://github.com/SciRuby/numruby"&gt;numruby&lt;/a&gt;.
These projects attempt to provide a simple Ruby-like API for creating and manipulating arrays
of various types. All of them are able to easily interface with libraries like ATLAS, FFTW
and LAPACK.&lt;/p&gt;
&lt;p&gt;However, all of the above projects fall short in two major aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of extensibility to adapt to modern use cases (read Machine Learning).&lt;/li&gt;
&lt;li&gt;Lack of a critical mass of developers to maintain a robust and fast array library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first problem is mainly due to the fact that they do not support very robust type systems.
The available data types are limited and are hard to extend to more complex uses. Modern use cases like
Machine Learning require a more robust type system (i.e. defining array shapes of arbitrary dimension on multiple devices), as has been demonstrated by the tensor
implementations of various frameworks like Tensorflow and PyTorch.&lt;/p&gt;
&lt;p&gt;The second problem is due to the fact that all of the aforementioned projects are community
efforts that are maintained part-time by developers simply out of a sense of purpose and
passion. Sustaining such complex projects for extended periods of time without expectation
of any support is simply unfeasible even for the most driven engineers.&lt;/p&gt;
&lt;p&gt;This is where the XND project comes in. The &lt;a href="https://xnd.io/"&gt;XND project&lt;/a&gt; is a project for
building a common library that is able to meet the needs of the various data analysis and
machine learning frameworks that have had to build their own array objects and programming 
languages. It is built with the premise of extending arrays with new types and various 
device types (CPUs, GPUs etc.) without loss of performance and ease of use.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/09/ruby-wrappers-for-the-xnd-project/</guid><pubDate>Sun, 15 Sep 2019 05:32:00 GMT</pubDate></item><item><title>Quansight Labs Dask Update</title><link>https://labs.quansight.org/blog/2019/08/labs-dask-update/</link><dc:creator>James Bourbeau</dc:creator><description>&lt;div&gt;&lt;p&gt;This post provides an update on some recent &lt;a href="https://dask.org/"&gt;Dask&lt;/a&gt;-related activities the Quansight Labs team has been working on.&lt;/p&gt;
&lt;h3&gt;Dask community work order&lt;/h3&gt;
&lt;p&gt;Through a community work order (CWO) with &lt;a href="https://www.deshaw.com/"&gt;the D. E. Shaw group&lt;/a&gt;, the Quansight Labs team has been able to dedicate developer time towards bug fixes and feature requests for Dask. This work has touched on several portions of the Dask codebase, but generally have centered around using &lt;a href="https://docs.dask.org/en/latest/array.html"&gt;Dask Arrays&lt;/a&gt; with the &lt;a href="https://distributed.dask.org/en/latest/"&gt;distributed scheduler&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/08/labs-dask-update/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Dask</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/08/labs-dask-update/</guid><pubDate>Tue, 27 Aug 2019 05:00:00 GMT</pubDate></item><item><title>Spyder 4.0 beta4: Kite integration is here</title><link>https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/</link><dc:creator>Edgar Margffoy-Tuay</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://kite.com"&gt;Kite&lt;/a&gt; is sponsoring the work discussed in this blog post, and in addition supports Spyder 4.0 development through a Quansight Labs &lt;a href="http://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Community Work Order&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As part of our next release, we are proud to announce an additional completion client for Spyder, Kite. &lt;a href="https://kite.com/"&gt;Kite&lt;/a&gt; is a novel completion client that uses Machine Learning techniques to find and predict the best autocompletion for a given text. Additionally, it collects improved documentation for compiled packages, i.e., Matplotlib, NumPy, SciPy that cannot be obtained easily by using traditional code analysis packages such as Jedi.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt_text" src="https://labs.quansight.org/images/spyder-kite-hover.png" title="image_tooltip"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/</guid><pubDate>Fri, 16 Aug 2019 19:19:13 GMT</pubDate></item><item><title>Quansight presence at SciPy'19</title><link>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday the SciPy'19 conference ended. It was a lot of fun, and very productive. You can really feel that there's a lot of energy in the community, and that it's growing and maturing. This post is just a quick update to summarize Quansight's presence and contributions, as well as some of the more interesting things I noticed.&lt;/p&gt;
&lt;h3&gt;A few highlights&lt;/h3&gt;
&lt;p&gt;The "Open Source Communities" track, which had a strong emphasis on topics like burnout, diversity and sustainability, as well as the keynotes by Stuart Geiger ("&lt;em&gt;The Invisible Work of Maintaining and Sustaining Open-Source Software&lt;/em&gt;") and Carol Willing ("&lt;em&gt;Jupyter: Always Open for Learning and Discovery&lt;/em&gt;") showed that many more people and projects are paying more attention to and evolving their thinking on the human and organizational aspects of open source. &lt;/p&gt;
&lt;p&gt;I did not go to many technical talks, but did make sure to catch Matt Rocklin's talk "&lt;em&gt;Refactoring the SciPy Ecosystem for Heterogeneous Computing&lt;/em&gt;". Matt clearly explained some key issues and opportunities around the state of array computing libraries in Python - I highly recommend watching this talk.&lt;/p&gt;
&lt;p&gt;Abigail Cabunoc Mayes' talk "&lt;em&gt;Work Open, Lead Open (#WOLO) for Sustainability&lt;/em&gt;" was fascinating - it made me rethink the governance models and roles we use for our projects, and I worked on some of her concrete suggestions during the sprints.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>SciPy</category><guid>https://labs.quansight.org/blog/2019/07/quansight-at-scipy2019/</guid><pubDate>Mon, 15 Jul 2019 05:00:00 GMT</pubDate></item><item><title>Ibis: Python data analysis productivity framework</title><link>https://labs.quansight.org/blog/2019/07/ibis-python-data-analysis-productivity-framework/</link><dc:creator>Ivan Ogasawara</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Ibis is a library pretty useful on data analysis tasks that provides a pandas-like API that allows operations like create filter, add columns, apply math operations etc in a &lt;code&gt;lazy&lt;/code&gt; mode so all the operations are just registered in memory but not executed and when you want to get the result of the expression you created, Ibis compiles that and makes a request to the remote server (remote storage and execution systems like Hadoop components or SQL databases). Its goal is to simplify analytical workflows and make you more productive.&lt;/p&gt;
&lt;p&gt;Ibis was created by &lt;a href="https://github.com/wesm"&gt;Wes McKinney&lt;/a&gt; and is mainly maintained by &lt;a href="https://github.com/cpcloud"&gt;Phillip Cloud&lt;/a&gt; and &lt;a href="https://github.com/kszucs"&gt;Krisztián Szűcs&lt;/a&gt;. Also, recently, I was invited to become a maintainer of the Ibis repository!&lt;/p&gt;
&lt;p&gt;Maybe you are thinking: "why should I use Ibis?". Well, if you have any of the following issues, probably you should consider using Ibis in your analytical workflow!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you need to get data from a SQL database but you don't know much about SQL ...&lt;/li&gt;
&lt;li&gt;if you create SQL statements manually using string and have a lot of &lt;code&gt;IF&lt;/code&gt;'s in your code that compose specific parts of your SQL code (it could be pretty hard to maintain and it will makes your code pretty ugly) ...&lt;/li&gt;
&lt;li&gt;if you need to handle data with a big volume ...&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/ibis-python-data-analysis-productivity-framework/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Ibis</category><guid>https://labs.quansight.org/blog/2019/07/ibis-python-data-analysis-productivity-framework/</guid><pubDate>Tue, 09 Jul 2019 03:30:00 GMT</pubDate></item><item><title>uarray update: API changes, overhead and comparison to __array_function__</title><link>https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;uarray&lt;/code&gt; is a generic override framework for objects and methods in Python. Since &lt;a href="https://labs.quansight.org/blog/2019/04/uarray-intro/"&gt;my last &lt;code&gt;uarray&lt;/code&gt; blogpost&lt;/a&gt;, there have been plenty of developments, changes to the API and improvements to the overhead of the protocol. Let’s begin with a walk-through of the current feature set and API, and then move on to current developments and how it compares to &lt;a href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/www.numpy.org/neps/nep-0018-array-function-protocol.html"&gt;&lt;code&gt;__array_function__&lt;/code&gt;&lt;/a&gt;. For further details on the API and latest developments, please see &lt;a href="https://uarray.readthedocs.io/en/latest/generated/uarray.html"&gt;the API page for &lt;code&gt;uarray&lt;/code&gt;&lt;/a&gt;. The examples there are doctested, so they will always be current.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Motivation"&gt;Motivation&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/#Motivation"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;h4 id="Other-array-objects"&gt;Other array objects&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/#Other-array-objects"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;NumPy is a simple, rectangular, dense, and in-memory data store. This is great for some applications but isn't complete on its own. It doesn't encompass every single use-case. The following are examples of array objects available today that have different features and cater to a different kind of audience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dask is one of the most popular ones. It allows distributed and chunked computation.&lt;/li&gt;
&lt;li&gt;CuPy is another popular one, and allows GPU computation.&lt;/li&gt;
&lt;li&gt;PyData/Sparse is slowly gaining popularity, and is a sparse, in-memory data store.&lt;/li&gt;
&lt;li&gt;XArray includes named dimensions.&lt;/li&gt;
&lt;li&gt;Xnd is another effort to re-write and modernise the NumPy API, and includes support for GPU arrays and ragged arrays.&lt;/li&gt;
&lt;li&gt;Another effort (although with no Python wrapper, only data marshalling) is xtensor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these objects can be composed. Namely, Dask both expects and exports the NumPy API, whereas XArray expects the NumPy API. This makes interesting combinations possible, such as distributed sparse or GPU arrays, or even labelled distributed sparse or CPU/GPU arrays.&lt;/p&gt;
&lt;p&gt;Also, there are many other libraries (a popular one being scikit-learn) that need a back-end mechanism in order to be able to support different kinds of array objects. Finally, there is a desire to see SciPy itself gain support for other array objects.&lt;/p&gt;
&lt;h4 id="__array_function__-and-its-limitations"&gt;&lt;code&gt;__array_function__&lt;/code&gt; and its limitations&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/#__array_function__-and-its-limitations"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One of my motivations for working on &lt;code&gt;uarray&lt;/code&gt; were the limitations of the &lt;code&gt;__array_function__&lt;/code&gt; protocol, defined in &lt;a href="https://www.numpy.org/neps/nep-0018-array-function-protocol.html"&gt;this proposal&lt;/a&gt;. The limitations are threefold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can only dispatch on array objects.&lt;/li&gt;
&lt;li&gt;Consequently, it can only dispatch on functions that &lt;em&gt;accept&lt;/em&gt; array objects.&lt;/li&gt;
&lt;li&gt;It has no mechanism for conversion and coercion.&lt;/li&gt;
&lt;li&gt;Since it conflates arrays and backends, only a single backend type per array object is possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These limitations have been &lt;a href="https://github.com/numpy/numpy/issues/11129"&gt;partially&lt;/a&gt; &lt;a href="http://numpy-discussion.10968.n7.nabble.com/Allowing-broadcasting-of-code-dimensions-in-generalized-ufuncs-td45589.html"&gt;discussed&lt;/a&gt; &lt;a href="http://numpy-discussion.10968.n7.nabble.com/Proposal-to-accept-NEP-18-array-function-protocol-td46001.html"&gt;before&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="uarray-—-The-solution?"&gt;&lt;code&gt;uarray&lt;/code&gt; — The solution?&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/#uarray-%E2%80%94-The-solution?"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With that out of the way, let's explore &lt;code&gt;uarray&lt;/code&gt;, a library that hopes to resolve these issues, and even though the original motivation was NumPy and array computing, the library itself is meant to be a generic multiple-dispatch mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Enable __array_function__ for NumPy &amp;lt; 1.17.0&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;NUMPY_EXPERIMENTAL_ARRAY_FUNCTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uarray&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ua&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In &lt;code&gt;uarray&lt;/code&gt;, the fundamental building block is a multimethod. Multimethods have a number of nice properties, such as automatic dispatch based on backends. It is important to note here that multimethods will be written by API authors, rather than implementors. Here's how we define a multimethod in &lt;code&gt;uarray&lt;/code&gt;:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/07/uarray-update-api-changes-overhead-and-comparison-to-__array_function__/</guid><pubDate>Wed, 03 Jul 2019 11:36:54 GMT</pubDate></item><item><title>Labs update and May highlights</title><link>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Time flies when you're having fun. Here is an update of some of the highlights
of my second month at Quansight Labs.&lt;/p&gt;
&lt;h3&gt;The making of a black hole image &amp;amp; GitHub Sponsors&lt;/h3&gt;
&lt;p&gt;Both Travis and myself were invited by GitHub to attend GitHub Satellite in
Berlin. The main reason was that Nat Friedman (GitHub CEO) decided to spend the
first 20 minutes of his keynote to highlight the &lt;a href="https://eventhorizontelescope.org/"&gt;Event Horizon
Telescope's&lt;/a&gt; black hole image and the open
source software that made that imaging possible. This included the scientific
Python very prominently - NumPy, Matplotlib, Python, Cython, SciPy, AstroPy and
other projects were highlighted. At the same time, Nat introduced new GitHub
features like "used by", a triaging role and new dependency graph features and
illustrated how those worked for NumPy. These features will be very welcome
news to maintainers of almost any project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Satellite'19 keynote, showcasing NumPy and Matplotlib" src="https://labs.quansight.org/images/githubsatellite_keynote_numpy_matplotlib.png"&gt;&lt;/p&gt;
&lt;p&gt;The single most visible feature introduced was &lt;strong&gt;GitHub Sponsors&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Sponsors enabled on the NumPy repo" src="https://labs.quansight.org/images/github_sponsors_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed meeting &lt;a href="https://devonzuegel.com"&gt;Devon Zuegel&lt;/a&gt;, Product
Manager of the Open Source Economy Team at GitHub, in person after previously
having had the chance to exchange ideas with her about the funding related
needs of scientific Python projects and their core teams. I'm confident that
GitHub Sponsors will evolve in a direction that's beneficial to
community-driven open source projects.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><guid>https://labs.quansight.org/blog/2019/06/labs-update-may-highlights/</guid><pubDate>Wed, 12 Jun 2019 05:00:00 GMT</pubDate></item><item><title>TDK-Micronas partners with Quansight to sponsor Spyder</title><link>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</link><dc:creator>Gonzalo Peña-Castellanos</dc:creator><description>&lt;div&gt;&lt;p&gt;TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs.
This will enable the development of some features that have been requested by
our users, as well as new features that will help TDK develop custom Spyder
plugins in order to complement their Automatic Test Equipment (ATE’s) in the
development of their Application Specific Integrated Circuits (ASIC’s).&lt;/p&gt;
&lt;p&gt;At this point it may be useful to clarify the relationship the role of
Quansight Labs in Spyder's development and the relationship with TDK. To quote
Ralf Gommers (director of Quansight Labs):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"We're an R&amp;amp;D lab for open source development of core technologies around data
science and scientific computing in Python. And focused on growing communities
around those technologies. That's how I see it for Spyder as well: Quansight
Labs enables developers to be employed to work on Spyder, and helps with
connecting them to developers of other projects in similar situations. Labs
should be an enabler to let the Spyder project, its community and individual
developers grow. And Labs provides mechanisms to attract and coordinate
funding. Of course the project is still independent. If there are other
funding sources, e.g. donations from individuals to Spyder via OpenCollective,
all the better."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Multiple Projects aka Workspaces&lt;/h3&gt;
&lt;p&gt;In its current state Spyder can only handle one active project at a time.
Although in the past we had basic support for workspaces, it was never a fully
functional feature, so to ease development and simplify the user experience,
we decided to remove it in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/06/tdk-partners-with-quansight-labs/</guid><pubDate>Sun, 02 Jun 2019 05:00:00 GMT</pubDate></item><item><title>metadsl: A Framework for Domain Specific Languages in Python</title><link>https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/</link><dc:creator>Saul Shanabrook</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="metadsl:-A-Framework-for-Domain-Specific-Languages-in-Python"&gt;&lt;a href="https://github.com/quansight-labs/metadsl"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt;: A Framework for Domain Specific Languages in Python&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/#metadsl:-A-Framework-for-Domain-Specific-Languages-in-Python"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hello, my name is Saul Shanabrook and for the past year or so I have been at Quansight exploring the array computing ecosystem. This started with working on the &lt;a href="https://xnd.io/"&gt;xnd project&lt;/a&gt;, a set of low level primitives to help build cross platform NumPy-like APIs, and then &lt;a href="https://github.com/saulshanabrook/moa"&gt;started&lt;/a&gt; &lt;a href="https://github.com/saulshanabrook/moa"&gt;exploring&lt;/a&gt; Lenore Mullin's work on a mathematics of arrays. After spending quite a bit of time working on an integrated solution built on these concepts, I decided to step back to try to generalize and simplify the core concepts. The trickiest part was not actually compiling mathematical descriptions of array operations in Python, but figuring out how to make it useful to existing users. To do this, we need to meet users where they are at, which is with the APIs they are already familiar with, like &lt;code&gt;numpy&lt;/code&gt;. The goal of &lt;code&gt;metadsl&lt;/code&gt; is to make it easier to tackle parts of this problem seperately so that we can collaborate on tackling it together.&lt;/p&gt;
&lt;h3 id="Libraries-for-Scientific-Computing"&gt;Libraries for Scientific Computing&lt;a class="anchor-link" href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/#Libraries-for-Scientific-Computing"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Much of the recent rise of Python's popularity is due to its usage for scientific computing and machine learning. This work is built on different frameworks, like Pandas, NumPy, Tensorflow, and scikit-learn. Each of these are meant to be used from Python, but have their own concepts and abstractions to learn on top of the core language, so we can look at them as Domain Specific Languages (DSLs). As the ecosystem has matured, we are now demanding more flexibility for how these languages are executed. Dask gives us a way to write Pandas or NumPy and execute it across many cores or computers, Ibis allows us to write Pandas but on a SQL database, with CuPy we can execute NumPy on our GPU, and with Numba we can optimize our NumPy expession on a CPU or GPU. These projects prove that it is possible to write optimizing compilers that target varying hardware paradigms for existing Python numeric APIs. However, this isn't straightforward and these projects success is a testament to the perserverence and ingenuity of the authors. We need to make it easy to add reusable optimizations to libraries like these, so that we can support the latest hardware and compiler optimizations from Python. &lt;a href="https://github.com/quansight-labs/metadsl"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt; is meant to be a place to come together to build a framework for DSLs in Python. It provides a way to seperate the user experience from the the specific of execution, to enable consistency and flexibility for users. In this post, I will go through an example of creating a very basic DSL. It will not use the &lt;code&gt;metadsl&lt;/code&gt; library, but will created in the same style as &lt;code&gt;metadsl&lt;/code&gt; to illustrate its basic principles.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/</guid><pubDate>Fri, 31 May 2019 05:00:00 GMT</pubDate></item><item><title>Community-driven open source and funded development</title><link>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Quansight Labs is an experiment for us in a way. One of our main aims is to
channel more resources into community-driven PyData projects, to keep them
healthy and accelerate their development. &lt;em&gt;And do so in a way that projects
themselves stay in charge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post explains one method we're starting to use for this. I'm writing it
to be transparent with projects, the wider community and potential funders
about what we're starting to do. As well as to explicitly solicit feedback on
this method.&lt;/p&gt;
&lt;h3&gt;Community work orders&lt;/h3&gt;
&lt;p&gt;If you talk to someone about supporting an open source project, in particular a
well-known one that they rely on (e.g. NumPy, Jupyter, Pandas), they're often
willing to listen and help. What you quickly learn though is that they want
to know in some detail what will be done with the funds provided. This is
true not only for companies, but also for individuals. In addition, companies
will likely want a written agreement and some form of reporting about the
progress of the work. To meet this need we came up with &lt;em&gt;community work
orders&lt;/em&gt; (CWOs) - agreements that outline what work will be done on a project
(implementing new features, release management, improving documentation,
etc.) and outlining a reporting mechanism. What makes a CWO different from a
consulting contract? Key differences are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be work that is done on the open source project itself (and not e.g.
   on a plugin for it, or a customization for the client).&lt;/li&gt;
&lt;li&gt;The developers must have a reasonable amount of freedom to decide what to
   work on and what the technical approach will be, within the broad scope of
   the agreement.&lt;/li&gt;
&lt;li&gt;Deliverables cannot be guaranteed to end up in a project; instead the funder
   gets the promise of a best effort of implementation and working with the
   community.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Respecting community processes&lt;/h3&gt;
&lt;p&gt;Point 3 above is particularly important: &lt;em&gt;we must respect how open source
projects make decisions&lt;/em&gt;. If the project maintainers decide that they don't
want to include a particular change or new feature, that's their decision to
make. Any code change proposed as part of work on a CWO has to go through the
same review process as any other change, and be accepted on its merits. The
argument "but someone paid for this" isn't particularly strong, nor is one
that reviewers should have to care about. Now of course we don't expect it to
be common for work to be rejected. An important part of the Quansight value
proposition is that because we understand how open source works and many of
our developers are maintainers and contributors of the open source projects
already, we propose work that the community already has interest in and we
open the discussion about any major code change early to avoid issues.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>Labs</category><guid>https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/</guid><pubDate>Wed, 29 May 2019 05:00:00 GMT</pubDate></item></channel></rss>