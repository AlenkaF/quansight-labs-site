<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs</title><link>https://labs.quansight.org/</link><description>Quansight Labs site: blog, development and project overview</description><atom:link href="https://labs.quansight.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Tue, 31 Aug 2021 10:47:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Is GitHub Actions suitable for running benchmarks?</title><link>https://labs.quansight.org/blog/2021/08/github-actions-benchmarks/</link><dc:creator>Jaime Rodríguez-Guerra</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Reliability of benchmarks in GitHub Actions. This 2D plot shows a 16-day timeseries in the X axis.
  Each data point in the X axis corresponds to a cloud of 75 measurements (one per benchmark test).
  The y-axis spread of each cloud corresponds to the performance ratio. Ideal measurements would have
  a performance ratio of 1.0, since both runs returned the exact same performance. In practice this
  does not happen and we can observe ratios between 0.6 and 1.5. This plot shows that while there
  is an observable y-spread, it is small enough to be considered sensitive to performance
  regressions of more than 50%." src="https://labs.quansight.org/images/2021/08/github-actions-benchmark.png"&gt;&lt;/p&gt;
&lt;p&gt;Benchmarking software is a tricky business. For robust results, you need dedicated
hardware that only runs the benchmarking suite under controlled conditions. No other
processes! No OS updates! Nothing else! Even then, you might find out that CPU throttling,
thermal regulation and other issues can introduce noise in your measurements.&lt;/p&gt;
&lt;p&gt;So, how are we even trying to do it on a CI provider like GitHub Actions?
Every job runs in a separate VM instance with frequent updates and shared resources. It
looks like it would just be a very expensive random number generator.&lt;/p&gt;
&lt;p&gt;Well, it turns out that there &lt;em&gt;is&lt;/em&gt; a sensible way to do it: &lt;strong&gt;relative benchmarking&lt;/strong&gt;.
And we know it works because we have been collecting stability data points for several
weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/08/github-actions-benchmarks/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>continuous-integration</category><category>github-actions</category><category>Open-Source</category><category>performance</category><guid>https://labs.quansight.org/blog/2021/08/github-actions-benchmarks/</guid><pubDate>Wed, 18 Aug 2021 00:01:00 GMT</pubDate></item><item><title>Moving SciPy to the Meson build system</title><link>https://labs.quansight.org/blog/2021/07/moving-scipy-to-meson/</link><dc:creator>Ralf Gommers</dc:creator><description>&lt;div&gt;&lt;p&gt;Let's start with an announcement: &lt;em&gt;&lt;strong&gt;SciPy now builds with
&lt;a href="https://mesonbuild.com/"&gt;Meson&lt;/a&gt; on Linux, and the full test suite passes!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a pretty exciting milestone, and good news for SciPy maintainers and
contributors - they can look forward to much faster builds and a more
pleasant development experience. So how fast is it? Currently the build takes
about 1min 50s (a ~4x improvement) on my 3 year old 12-core Intel CPU
(i9-7920X @ 2.90GHz):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Profiling result of a parallel build of SciPy with Meson" src="https://labs.quansight.org/images/2021/07/ninjabuild_tracing_12jobs.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiling result of a parallel build (12 jobs) of SciPy with Meson. Visualization created with &lt;a href="https://github.com/nico/ninjatracing/blob/master/ninjatracing"&gt;ninjatracing&lt;/a&gt; and &lt;a href="https://ui.perfetto.dev"&gt;Perfetto&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the tracing results, building a single C++ file
(&lt;code&gt;bsr.cxx&lt;/code&gt;, which is one of SciPy's sparse matrix formats) takes over 90
seconds. So the 1min 50 sec build time is close to optimal - the only ways to improve it are major surgery on that C++ code, or buying a faster CPU.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/07/moving-scipy-to-meson/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>build</category><category>Labs</category><category>Meson</category><category>packaging</category><category>SciPy</category><guid>https://labs.quansight.org/blog/2021/07/moving-scipy-to-meson/</guid><pubDate>Sun, 25 Jul 2021 18:00:00 GMT</pubDate></item><item><title>Introducing PyTorch-Ignite's Code Generator v0.2.0</title><link>https://labs.quansight.org/blog/2021/07/introducing-code-generator-v020/</link><dc:creator>Victor Fomin</dc:creator><description>&lt;figure&gt;&lt;img src="https://labs.quansight.org/images/pytorch-ignite/code-generator/code-generator-preview.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;&lt;a href="https://code-generator.pytorch-ignite.ai/"&gt;&lt;img alt="Code Generator v0.2.0 demo" src="https://raw.githubusercontent.com/pytorch-ignite/code-generator/main/src/assets/code-generator-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Authors: &lt;a href="https://github.com/ydcjeff"&gt;Jeff Yang&lt;/a&gt;, &lt;a href="https://github.com/trsvchn"&gt;Taras Savchyn&lt;/a&gt;, &lt;a href="https://github.com/Priyansi"&gt;Priyansi&lt;/a&gt;, &lt;a href="https://github.com/vfdev-5"&gt;Victor Fomin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Along with the &lt;a href="https://github.com/pytorch/ignite/releases/tag/v0.4.5"&gt;PyTorch-Ignite 0.4.5 release&lt;/a&gt;, we are excited to announce the new release of the web application for generating PyTorch-Ignite's training pipelines. This blog post is an overview of the key features and updates of the &lt;a href="https://github.com/pytorch-ignite/code-generator/releases/tag/v0.2.0"&gt;Code Generator v0.2.0 project release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/07/introducing-code-generator-v020/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Code Generator</category><category>Deep Learning</category><category>Machine Learning</category><category>PyTorch</category><category>PyTorch-Ignite</category><guid>https://labs.quansight.org/blog/2021/07/introducing-code-generator-v020/</guid><pubDate>Fri, 16 Jul 2021 19:50:33 GMT</pubDate></item><item><title>Pyflyby: Improving Efficiency of Jupyter Interactive Sessions</title><link>https://labs.quansight.org/blog/2021/07/pyflyby-improving-efficiency-of-jupyter-interactive-sessions/</link><dc:creator>Matthias Bussonnier, Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;Few things hinder productivity more than interruption. A notification, random
realization, or unrelated error can derail one's train of thought when deep in a
complex analysis – a frustrating experience.&lt;/p&gt;
&lt;p&gt;In the software development context, forgetting to import a statement in an
interactive Jupyter session is such an experience. This can be especially
frustrating when using typical abbreviations, like &lt;code&gt;np&lt;/code&gt;, &lt;code&gt;pd&lt;/code&gt;, &lt;code&gt;plt&lt;/code&gt;, where the
meaning is obvious to the human reader, but not to the computer. The
time-to-first-plot, and ability to quickly cleanup one's notebook afterward
are critical to an enjoyable and efficient workflow.&lt;/p&gt;
&lt;p&gt;In this blogpost we present &lt;a href="https://github.com/deshaw/pyflyby"&gt;pyflyby&lt;/a&gt;, a
project and an extension to IPython and
&lt;a href="https://github.com/deshaw/jupyterlab-pyflyby"&gt;JupyterLab&lt;/a&gt;, that, among many
things, automatically inserts imports and tidies Python files and notebooks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/07/pyflyby-improving-efficiency-of-jupyter-interactive-sessions/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Deshaw</category><category>Labs</category><category>Pyflyby</category><guid>https://labs.quansight.org/blog/2021/07/pyflyby-improving-efficiency-of-jupyter-interactive-sessions/</guid><pubDate>Wed, 07 Jul 2021 10:00:00 GMT</pubDate></item><item><title>Distributed Training Made Easy with PyTorch-Ignite</title><link>https://labs.quansight.org/blog/2021/06/distributed-made-easy-with-ignite/</link><dc:creator>Victor Fomin</dc:creator><description>&lt;div&gt;&lt;img alt="PyTorch-Ignite logo" src="https://labs.quansight.org/images/pytorch-ignite/ignite_logo_mixed.png"&gt;
&lt;p&gt;Authors: &lt;a class="reference external" href="https://github.com/fco-dv"&gt;François Cokelaer&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/Priyansi"&gt;Priyansi&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/sdesrozis/"&gt;Sylvain
Desroziers&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/vfdev-5"&gt;Victor
Fomin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Writing &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Agnostic_(data)"&gt;agnostic&lt;/a&gt;
&lt;a class="reference external" href="https://pytorch.org/tutorials/beginner/dist_overview.html"&gt;distributed
code&lt;/a&gt; that
supports different platforms, hardware configurations (GPUs, TPUs) and
communication frameworks is tedious. In this blog, we will discuss how
&lt;a class="reference external" href="https://pytorch.org/ignite/"&gt;PyTorch-Ignite&lt;/a&gt; solves this problem
with minimal code change.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/06/distributed-made-easy-with-ignite/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Deep Learning</category><category>Distributed</category><category>Horovod</category><category>Machine Learning</category><category>PyTorch</category><category>PyTorch DDP</category><category>PyTorch XLA</category><category>PyTorch-Ignite</category><category>SLURM</category><guid>https://labs.quansight.org/blog/2021/06/distributed-made-easy-with-ignite/</guid><pubDate>Mon, 28 Jun 2021 08:00:00 GMT</pubDate></item><item><title>Working with pytest on PyTorch</title><link>https://labs.quansight.org/blog/2021/06/pytest-pytorch/</link><dc:creator>Philip Meier</dc:creator><description>&lt;div&gt;&lt;details&gt;
&lt;summary&gt;Prerequisites&lt;/summary&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;To run the code in this post yourself, make sure you have &lt;a href="https://pypi.org/project/torch/"&gt;&lt;code&gt;torch&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/ipytest/"&gt;&lt;code&gt;ipytest&amp;gt;0.9&lt;/code&gt;&lt;/a&gt;, and the plugin to be introduced &lt;a href="https://github.com/Quansight/pytest-pytorch"&gt;&lt;code&gt;pytest-pytorch&lt;/code&gt;&lt;/a&gt; installed.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

&lt;pre&gt;&lt;code&gt;pip install torch 'ipytest&amp;gt;0.9' pytest-pytorch&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Before we start testing, we need to configure &lt;a href="https://github.com/chmp/ipytest"&gt;&lt;code&gt;ipytest&lt;/code&gt;&lt;/a&gt;. We use the &lt;a href="https://github.com/chmp/ipytest#ipytestautoconfig"&gt;&lt;code&gt;ipytest.autoconfig()&lt;/code&gt;&lt;/a&gt; as base and add some &lt;a href="https://docs.pytest.org/en/stable/reference.html#command-line-flags"&gt;&lt;code&gt;pytest&lt;/code&gt; CLI flags&lt;/a&gt; in order to get a concise output.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipytest&lt;/span&gt;

&lt;span class="n"&gt;ipytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoconfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defopts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;default_flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--quiet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--disable-warnings"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_configure_ipytest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;additional_flags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;addopts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--collect-only"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;addopts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;additional_flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="n"&gt;ipytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addopts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;addopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enable_pytest_pytorch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_configure_ipytest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disable_pytest_pytorch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_configure_ipytest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--disable-pytest-pytorch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;collect_only&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
&lt;span class="n"&gt;disable_pytest_pytorch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If you work on &lt;a href="https://pytorch.org"&gt;PyTorch&lt;/a&gt; and like &lt;a href="https://pytest.org"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; you may have noticed that you cannot run some tests in the test suite using the default &lt;a href="https://pytest.org"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; double colon syntax &lt;code&gt;{MODULE}::TestFoo::test_bar&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;run_pytest&lt;/span&gt;[clean] {MODULE}::TestFoo::test_bar

from torch.testing._internal.common_utils import TestCase
from torch.testing._internal.common_device_type import instantiate_device_type_tests


class TestFoo(TestCase):
    def test_bar(self, device):
        assert False, "Don't worry, this is supposed to happen!"

    
instantiate_device_type_tests(TestFoo, globals(), only_for=["cpu"])
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;
1 warning in 0.01s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stderr output_text"&gt;
&lt;pre&gt;ERROR: not found: /home/user/tmp35zsok9u.py::TestFoo::test_bar
(no name '/home/user/tmp35zsok9u.py::TestFoo::test_bar' in any of [&amp;lt;Module tmp35zsok9u.py&amp;gt;])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If the absence of this very basic &lt;a href="https://pytest.org"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; feature has ever been the source of frustration for you, you don't need to worry anymore. By installing the &lt;a href="https://github.com/Quansight/pytest-pytorch"&gt;&lt;code&gt;pytest-pytorch&lt;/code&gt;&lt;/a&gt; plugin with&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

&lt;pre&gt;&lt;code&gt;pip install pytest-pytorch&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;or&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

&lt;pre&gt;&lt;code&gt;conda install -c conda-forge pytest-pytorch&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;you get the default &lt;a href="https://pytest.org"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; experience back even if your workflow involves running tests from within your IDE!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/06/pytest-pytorch/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2021/06/pytest-pytorch/</guid><pubDate>Wed, 23 Jun 2021 18:35:06 GMT</pubDate></item><item><title>Putting out the fire: Where do we start with accessibility in JupyterLab?</title><link>https://labs.quansight.org/blog/2021/05/putting-out-the-fire/</link><dc:creator>Isabela Presedo-Floyd</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Multiple fires in an alternating pattern" src="https://labs.quansight.org/images/jlabaccess2.png"&gt;&lt;/p&gt;
&lt;h3&gt;JupyterLab Accessibility Journey Part 2&lt;/h3&gt;
&lt;p&gt;I want to be honest with you, I started asking accessibility questions
in JupyterLab spaces while filled with anxiety. Anxiety that I was shouting
into the void and no one else would work on accessibility with me. Anxiety
that I didn’t have the skills or energy or knowledge to back up what I
wanted to do. Anxiety that I was going to do it wrong and make JupyterLab
even more inaccessible. Sometimes I still feel that way.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/05/putting-out-the-fire/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Accessibility</category><category>JLabA11y</category><category>JupyterLab</category><guid>https://labs.quansight.org/blog/2021/05/putting-out-the-fire/</guid><pubDate>Tue, 25 May 2021 08:00:00 GMT</pubDate></item><item><title>Rethinking Jupyter Interactive Documentation</title><link>https://labs.quansight.org/blog/2021/05/rethinking-jupyter-documentation/</link><dc:creator>Matthias Bussonnier</dc:creator><description>&lt;div&gt;&lt;p&gt;Jupyter Notebook first release was 8 years ago – under the IPython Notebook
name at the time. Even if notebooks were not invented by Jupyter; they were
definitely democratized by it. Being Web powered allowed development of many
changes in the Datascience world. Objects now often expose rich representation; from
Pandas dataframes with as html tables, to more recent &lt;a href="https://github.com/scikit-learn/scikit-learn/pull/14180"&gt;Scikit-learn model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I want to look into a topic that has not evolved much since, and I believe
could use an upgrade. Accessing interactive Documentation when in a Jupyter
session, and what it could become. At the end I'll link to my current prototype
if you are adventurous.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/05/rethinking-jupyter-documentation/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>documentation</category><category>Open-Source</category><category>Python</category><guid>https://labs.quansight.org/blog/2021/05/rethinking-jupyter-documentation/</guid><pubDate>Fri, 07 May 2021 00:01:00 GMT</pubDate></item><item><title>Spot the differences: what is new in Spyder 5?</title><link>https://labs.quansight.org/blog/2021/04/spot-the-diffenrences/</link><dc:creator>Isabela Presedo-Floyd, Juanita Gomez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Spyder 5 versus Spyder 4" src="https://labs.quansight.org/images/spyder5-header.png"&gt;&lt;/p&gt;
&lt;p&gt;In case you missed it, Spyder 5 was released at the beginning of April! This 
blog post is a conversation attempting to document the long and complex 
process of improving Spyder's UI with this release. Portions lead by Juanita 
Gomez are marked as &lt;strong&gt;Juanita&lt;/strong&gt;, and those lead by Isabela Presedo-Floyd are 
marked as &lt;strong&gt;Isabela&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;What did we do?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[Juanita]&lt;/strong&gt; &lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt; was created more than 10 
years ago and it has had the contributions of a great number of developers 
who have written code, proposed ideas, opened issues and tested PRs in order 
to build a piece of Spyder on their own. We (the Spyder team) have been lucky 
to have such a great community of people contributing throughout the years, 
but this is the first time that we decided to ask for help from an UX/UI 
expert! Why? You might wonder. Having the contributions of this great amount 
of people has resulted in inconsistencies around Spyder’s interface which we 
didn’t stop to analyze until now. &lt;/p&gt;
&lt;p&gt;When Isabela joined Quansight, we realized that we had an opportunity of 
improving Spyder’s interface with her help. We thought her skill set was 
everything we needed to make Spyder’s UI better.  So we started by reviewing 
the results of a community survey from a few months ago and realized that 
some of the most common feedback from users is related to its interface 
(very crowded, not consistent, many colors). This is why we decided to start 
a joint project with Isabela, (who we consider now part of the Spyder team) 
called &lt;a href="https://github.com/spyder-ide/spyder/releases/tag/v5.0.0"&gt;Spyder 5&lt;/a&gt;!!!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/04/spot-the-diffenrences/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>release</category><category>Spyder</category><category>UX/UI</category><guid>https://labs.quansight.org/blog/2021/04/spot-the-diffenrences/</guid><pubDate>Fri, 16 Apr 2021 14:00:00 GMT</pubDate></item><item><title>A step towards educating with Spyder</title><link>https://labs.quansight.org/blog/2021/04/a-step-towards-educating-with-spyder/</link><dc:creator>Juanita Gomez</dc:creator><description>&lt;div&gt;&lt;p&gt;As a community manager in the Spyder team, I have been looking for ways of
involving more users in the community and making Spyder useful for a larger
number of people. With this, a new idea came: Education.&lt;/p&gt;
&lt;p&gt;For the past months, we have been wondering with the team whether Spyder
could also serve as a teaching-learning platform, especially in this era
where remote instruction has become necessary. We submitted a proposal to the
Essential Open Source Software for Science (EOSS) program of the Chan
Zuckerberg Initiative, during its third cycle, with the idea of providing a
simple way inside Spyder to create and share interactive tutorials on topics
relevant to scientific research. Unfortunately, we didn’t get this funding,
but we didn’t let this great idea die.&lt;/p&gt;
&lt;p&gt;We submitted a second proposal to the &lt;a href="https://www.python.org/psf/"&gt;Python Software Foundation&lt;/a&gt;
from which we were awarded $4000. For me, this is the perfect opportunity for
us to take the first step towards using Spyder for education.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2021/04/a-step-towards-educating-with-spyder/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>community</category><category>funding</category><category>grant</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2021/04/a-step-towards-educating-with-spyder/</guid><pubDate>Sun, 11 Apr 2021 14:00:00 GMT</pubDate></item></channel></rss>