<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs</title><link>https://labs.quansight.org/</link><description>Quansight Labs site: blog, development and project overview</description><atom:link href="https://labs.quansight.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Tue, 28 Apr 2020 08:49:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Thanking the people behind Spyder 4</title><link>https://labs.quansight.org/blog/2020/04/thanking-the-people-behind-spyder-4/</link><dc:creator>Carlos Córdoba</dc:creator><description>&lt;div&gt;&lt;p&gt;After more than three years in development and more than 5000 commits from 60 authors around the world, Spyder 4 finally saw the light on December 5, 2019!
I decided to wait until now to write a blogpost about it because shortly after the initial release, we found several critical performance issues and some regressions with respect to Spyder 3, most of which are fixed now in &lt;a href="https://github.com/spyder-ide/spyder/releases/tag/v4.1.2"&gt;version 4.1.2&lt;/a&gt;, released on April 3rd 2020.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/04/thanking-the-people-behind-spyder-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2020/04/thanking-the-people-behind-spyder-4/</guid><pubDate>Tue, 28 Apr 2020 06:00:00 GMT</pubDate></item><item><title>Introducing ndindex, a Python library for manipulating indices of ndarrays</title><link>https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the most important features of NumPy arrays is their indexing
semantics. By "indexing" I mean anything that happens inside square brackets,
for example, &lt;code&gt;a[4::-1, 0, ..., [0, 1], np.newaxis]&lt;/code&gt;. NumPy's index semantics
are very expressive and powerful, and this is one of the reasons the library
is so popular.&lt;/p&gt;
&lt;p&gt;Index objects can be represented and manipulated directly. For example, the
above index is &lt;code&gt;(slice(4, None, -1), 0, Ellipsis, [0, 1], None)&lt;/code&gt;. If you are
any author of a library that tries to replicate NumPy array semantics, you
will have to work with these objects. However, they are often difficult to
work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The different types that are valid indices for NumPy arrays do not have a
uniform API. Most of the types are also standard Python types, such as
&lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;, which are usually unrelated to indexing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those objects that are specific to indexes, such as &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;Ellipsis&lt;/code&gt;
do not make any assumptions about their underlying semantics. For example,
Python lets you create &lt;code&gt;slice(None, None, 0)&lt;/code&gt; or &lt;code&gt;slice(0, 0.5)&lt;/code&gt; even though
&lt;code&gt;a[::0]&lt;/code&gt; and &lt;code&gt;a[0:0.5]&lt;/code&gt; would be always be an &lt;code&gt;IndexError&lt;/code&gt; on a NumPy array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some index objects, such as &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;ndarray&lt;/code&gt; are not hashable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NumPy itself does not offer much in the way of helper functions to work with
these objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These limitations may be annoying, but are easy enough to live with. The real
challenge when working with indices comes when you try to manipulate them.
Slices in particular are challenging to work with because the rich meaning of
slice semantics. Writing formulas for even very simple things is a real
challenge with slices. &lt;code&gt;slice(start, stop, step)&lt;/code&gt; (corresponding to
&lt;code&gt;a[start:stop:step]&lt;/code&gt;) has fundamentally different meaning depending on whether
&lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;, or &lt;code&gt;step&lt;/code&gt; are negative, nonnegative, or &lt;code&gt;None&lt;/code&gt;. As an example,
take &lt;code&gt;a[4:-2:-2]&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is a one-dimensional array. This slices every
other element from the third element to the second from the last. What will
the shape of this sliced array be? The answer is &lt;code&gt;(0,)&lt;/code&gt; if the original shape
is less than 1 or greater than 5, and &lt;code&gt;(1,)&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;Code that manipulates slices will tend to have a lot of &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; chains for
these different cases. And due to 0-based indexing, half-open semantics,
wraparound behavior, clipping, and step logic, the formulas are often quite
difficult to write down.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ndindex</category><category>NumPy</category><guid>https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/</guid><pubDate>Mon, 20 Apr 2020 05:00:00 GMT</pubDate></item><item><title>PyTorch TensorIterator Internals</title><link>https://labs.quansight.org/blog/2020/04/pytorch-tensoriterator-internals/</link><dc:creator>Sameer Deshmukh</dc:creator><description>&lt;div&gt;&lt;p&gt;PyTorch is one of the leading frameworks for deep learning. Its core data
structure is &lt;code&gt;Tensor&lt;/code&gt;, a multi-dimensional array implementation with many
advanced features like auto-differentiation. PyTorch is a massive
codebase (approx. &lt;a href="https://www.openhub.net/p/pytorch"&gt;a million lines&lt;/a&gt; of
C++, Python and CUDA code), and having a method for iterating over tensors in a
very efficient manner that is independent of data type, dimension, striding and
hardware is a critical feature that can lead to a very massive simplification
of the codebase and make distributed development much faster and smoother. The
&lt;a href="https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/TensorIterator.cpp"&gt;&lt;code&gt;TensorIterator&lt;/code&gt;&lt;/a&gt;
C++ class within PyTorch is a complex yet useful class that is used for
iterating over the elements of a tensor over any dimension and implicitly
parallelizing various operations in a device independent manner.&lt;/p&gt;
&lt;p&gt;It does this through a C++ API that is independent of type and device of the
tensor, freeing the programmer of having to worry about the datatype or device
when writing iteration logic for PyTorch tensors. For those coming from the
NumPy universe, &lt;code&gt;NpyIter&lt;/code&gt; is a close cousin of &lt;code&gt;TensorIterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This post is a deep dive into how &lt;code&gt;TensorIterator&lt;/code&gt; works, and is an essential
part of learning to contribute to the PyTorch codebase since iterations over
tensors in the C++ codebase are extremely commonplace. This post is aimed at
someone who wants to contribute to PyTorch, and you should at least be familiar
with some of the basic terminologies of the PyTorch codebase that can be found
in Edward Yang's excellent &lt;a href="http://blog.ezyang.com/2019/05/pytorch-internals"&gt;blog post&lt;/a&gt;
on PyTorch internals.  Although &lt;code&gt;TensorIterator&lt;/code&gt; can be used for both CPUs and
accelerators, this post has been written keeping in mind usage on the CPU.
Although there can be some dissimilarities between the two, the overall
concepts are the same.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/04/pytorch-tensoriterator-internals/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>PyTorch</category><guid>https://labs.quansight.org/blog/2020/04/pytorch-tensoriterator-internals/</guid><pubDate>Mon, 13 Apr 2020 15:39:56 GMT</pubDate></item><item><title>Documentation as a way to build Community</title><link>https://labs.quansight.org/blog/2020/03/documentation-as-a-way-to-build-community/</link><dc:creator>Melissa Mendonça</dc:creator><description>&lt;div&gt;&lt;p&gt;As a long time user and participant in open source communities, I've always known that documentation is far from being a solved problem. At least, that's the impression we get from many developers: "writing docs is boring"; "it's a chore, nobody likes to do it". I have come to realize I'm one of those rare people who likes to write both code and documentation. &lt;/p&gt;
&lt;p&gt;Nobody will argue against documentation. It is clear that for an open-source software project, documentation is the public face of the project. The docs influence how people interact with the software and with the community. It sets the tone about inclusiveness, how people communicate and what users and contributors can do. Looking at the results of a “NumPy Tutorial” search on any search engine also gives an idea of the demand for this kind of content - it is possible to find documentation about how to read the NumPy documentation!&lt;/p&gt;
&lt;p&gt;I've started working at Quansight in January, and I have started doing work related to the &lt;a href="https://labs.quansight.org/blog/2019/11/numpy-openblas-CZI-grant/"&gt;NumPy CZI Grant&lt;/a&gt;. As a former professor in mathematics, this seemed like an interesting project both because of its potential impact on the NumPy (and larger) community and because of its relevance to me, as I love writing educational material and documentation. Having official high-level documentation written using up-to-date content and techniques will certainly mean more users (and developers/contributors) are involved in the NumPy community.&lt;/p&gt;
&lt;p&gt;So, if everybody agrees on its importance, why is it so hard to write good documentation?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/03/documentation-as-a-way-to-build-community/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>NumPy</category><guid>https://labs.quansight.org/blog/2020/03/documentation-as-a-way-to-build-community/</guid><pubDate>Sat, 14 Mar 2020 12:25:55 GMT</pubDate></item><item><title>uarray: GSoC Participation</title><link>https://labs.quansight.org/blog/2020/03/uarray-gsoc-participation/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm pleased to announce that &lt;code&gt;uarray&lt;/code&gt; is participating in GSoC '20 as a sub-organization under the umbrella of the Python Software Foundation. Our ideas page is up &lt;a href="https://uarray.org/en/latest/gsoc/2020/ideas.html"&gt;here&lt;/a&gt;, go take a look and see if you (or someone you know) is interested in participating, either as a student or as a mentor.&lt;/p&gt;
&lt;p&gt;Prasun Anand and Peter Bell and myself will be mentoring, and we plan to take a maximum of two students, unless more community mentors show up.&lt;/p&gt;
&lt;p&gt;There have been &lt;a href="https://github.com/Quansight-Labs/uarray/pulls?q=is%3Apr+is%3Aclosed"&gt;quite&lt;/a&gt; &lt;a href="https://github.com/Quansight-Labs/unumpy/pulls?q=is%3Apr+is%3Aclosed"&gt;a few&lt;/a&gt; &lt;a href="https://github.com/Quansight-Labs/udiff/pulls?q=is%3Apr+is%3Aclosed"&gt;pull requests&lt;/a&gt; already to qualify from prospective students, some even going as far as to begin the work described in the idea they plan to work on.&lt;/p&gt;
&lt;p&gt;We're quite excited by the number of students who have shown an interest in participating, and we look forward to seeing excellent applications! What's more exciting, though, are some of the first contributions from people not currently at Quansight, in the true spirit of open-source software!&lt;/p&gt;&lt;/div&gt;</description><category>Big data</category><category>NumPy</category><category>SciPy</category><category>Tensors</category><category>uarray</category><guid>https://labs.quansight.org/blog/2020/03/uarray-gsoc-participation/</guid><pubDate>Thu, 12 Mar 2020 12:39:00 GMT</pubDate></item><item><title>Planned architectural work for PyData/Sparse</title><link>https://labs.quansight.org/blog/2020/02/whats-next-for-pydatasparse/</link><dc:creator>Hameer Abbasi</dc:creator><description>&lt;div&gt;&lt;h2&gt;What have we been doing so far? 🤔&lt;/h2&gt;
&lt;h3&gt;Research 📚&lt;/h3&gt;
&lt;p&gt;A lot of behind the scenes work has been taking place on PyData/Sparse. Not so much in terms of code, more in terms of research and community/team building. I've more-or-less decided to use the structure and the research behind the &lt;a href="https://github.com/tensor-compiler/taco"&gt;Tensor Algebra Compiler&lt;/a&gt;, the work of Fredrik Kjolstad and his collaborators at MIT. 🙇🏻‍♂️ To this end, I've read/watched the following talks and papers:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/02/whats-next-for-pydatasparse/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Big data</category><category>NumPy</category><category>SciPy</category><category>Sparse</category><category>Tensors</category><guid>https://labs.quansight.org/blog/2020/02/whats-next-for-pydatasparse/</guid><pubDate>Wed, 11 Mar 2020 11:30:00 GMT</pubDate></item><item><title>My Unexpected Dive into Open-Source Python</title><link>https://labs.quansight.org/blog/2020/02/my-unexpected-dive-into-open-source-python/</link><dc:creator>Mars Lee</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Header Image" src="https://labs.quansight.org/images/codesprite-comics/My-Unexpected-Dive-Into-Open-Source-Python-Illustration.png"&gt;
&lt;em&gt;Header illustration by author, Mars Lee&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm very happy to announce that I have joined &lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt; as a front-end developer and designer! It was a happy coincidence how I joined- the intersection of my skills and the open source community's expanded vision.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/02/my-unexpected-dive-into-open-source-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>PyData</category><guid>https://labs.quansight.org/blog/2020/02/my-unexpected-dive-into-open-source-python/</guid><pubDate>Fri, 21 Feb 2020 18:38:07 GMT</pubDate></item><item><title>Creating the ultimate terminal experience in Spyder 4 with Spyder-Terminal</title><link>https://labs.quansight.org/blog/2020/02/creating-the-ultimate-terminal-experience-in-Spyder-4-with-Spyder-Terminal/</link><dc:creator>Stephannie Jimenez</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;a href="https://github.com/spyder-ide/Spyder-Terminal"&gt;Spyder-Terminal project&lt;/a&gt; is revitalized! The new 0.3.0 version adds numerous features that improves the user experience, and enhances compatibility with the latest Spyder 4 release, in part thanks to the improvements made in the &lt;a href="https://xtermjs.org/"&gt;xterm.js&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/02/creating-the-ultimate-terminal-experience-in-Spyder-4-with-Spyder-Terminal/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2020/02/creating-the-ultimate-terminal-experience-in-Spyder-4-with-Spyder-Terminal/</guid><pubDate>Fri, 14 Feb 2020 19:00:00 GMT</pubDate></item><item><title>metadsl PyData talk</title><link>https://labs.quansight.org/blog/2019/12/metadsl-talk/</link><dc:creator>Saul Shanabrook</dc:creator><description>&lt;div&gt;&lt;h2&gt;metadsl PyData talk&lt;/h2&gt;
&lt;p&gt;PyData NYC just ended and I thought it would be good to collect my thoughts on &lt;a href="https://metadsl.readthedocs.io/en/latest/"&gt;&lt;code&gt;metadsl&lt;/code&gt;&lt;/a&gt; based on the many conversations I had there surrounding it. This is a rather long post, so if you are just looking for some code &lt;a href="https://mybinder.org/v2/gh/Quansight-Labs/metadsl/959575fe6d6df884b987954c017dfa7f7c99b61a?urlpath=lab/tree/explorations/2109.12.07%20PyData%20Talk.ipynb"&gt;&lt;strong&gt;here is a Binder link for my talk&lt;/strong&gt;&lt;/a&gt;. Also, here is the talk I gave a month or so later on the same topic in Austin:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/cdWdTPL7zrg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;What is &lt;code&gt;metadsl&lt;/code&gt;?&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
   &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nd"&gt;@metadsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_zero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
   &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/12/metadsl-talk/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>metadsl</category><guid>https://labs.quansight.org/blog/2019/12/metadsl-talk/</guid><pubDate>Tue, 24 Dec 2019 11:00:00 GMT</pubDate></item><item><title>Variable Explorer improvements in Spyder 4</title><link>https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/</link><dc:creator>Daniel Althviz</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt; 4 will be released very soon with lots of interesting new features that you'll want to check out, reflecting years of effort by the team to improve the user experience. In this post, we will be talking about the improvements made to the Variable Explorer.&lt;/p&gt;
&lt;p&gt;These include the brand new Object Explorer for inspecting arbitrary Python variables, full support for MultiIndex dataframes with multiple dimensions, and the ability to filter and search for variables by name and type, and much more.&lt;/p&gt;
&lt;p&gt;It is important to mention that several of the above improvements were made possible through integrating the work of two other projects. Code from &lt;a href="https://github.com/TabViewer/gtabview"&gt;gtabview&lt;/a&gt; was used to implement the multi-dimensional Pandas indexes, while &lt;a href="https://github.com/titusjan/objbrowser"&gt;objbrowser&lt;/a&gt; was the foundation of the new Object Explorer.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>Spyder</category><guid>https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/</guid><pubDate>Fri, 29 Nov 2019 01:00:00 GMT</pubDate></item></channel></rss>